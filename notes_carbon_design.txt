Carbon design system
====================

https://www.carbondesignsystem.com/
https://github.com/carbon-design-system

- Carbon is IBM’s open-source design system
- consists of working code, design tools and resources, human interface guidelines
- The goals of the design system
1. improving UI consistency and quality, 
2. making the design and development process more efficient and focused, 
3. establishing a shared vocabulary between designer and developer, and 
4. providing clear, discoverable guidance around design and development best practices.
5. ensure consistent, cohesive user experiences.

- maintain a set of Sketch libraries containing Carbon components and patterns
- Sketch Libraries are Sketch documents with components (Symbols, Text Styles and Layer Styles) that you can share across all of your other documents
- Sketch is a vector graphics editor for macOS. $$PAID Software
	- It is primarily used for user interface and user experience design of websites and mobile apps
	- drag and drop interface 
	- The files designed in Sketch are saved in its own .sketch file format
	- Also supports prototyping and colllaboration
	- Sketch is essentially a version of Photoshop built from the ground up to suit the workflow of web designers.

- Carbon supports multiple code implementations. 
1. React	- Carbon React library. https://react.carbondesignsystem.com/?path=/story/buttons--default
2. CSS/Vanilla
3. Angular - Carbon Angular library. https://angular.carbondesignsystem.com/?path=/story/components-button--basic  Collection of reusable Angular components
4. Vue

- Adopting the library enables developers to use consistent markup, styles, and behavior in prototype and production work.
- Similar to primrfaces(for JSF). PrimeNG (for Angular)

- Design Tools
1. Sketch. Paid. https://www.sketch.com/
2. Axure. Paid. https://www.axure.com/download
3. Adobe XD. Paid.  https://www.adobe.com/in/products/xd.html

Progressive web app
-------------
- PWA is a web application that has a set of capabilities (similar to native apps) which provide an app-like experience to users. 
- Some other capabilities include full responsiveness and browser compatibility, connectivity independence and self-updates.


Working with starter kit
==========================
git clone git@github.com:carbon-design-system/carbon-tutorial-angular.git
cd carbon-tutorial-angular
git checkout -b angular-step-1
git remote add starter git@github.com:carbon-design-system/carbon-angular-starter.git
git fetch starter
git reset --hard starter/master
git remote remove starter
npm install
npm start

from scratch
=============
	ng new carbon-angular-tutorial 
- Would you like to add Angular routing? Yes
- Which stylesheet format would you like to use? SCSS
	cd carbon-angular-tutorial
	npm install carbon-components carbon-components-angular @carbon/icons-angular
- carbon-components - component styles
- carbon-components-angular - Angular components
- @carbon/icons-angular - Angular icons
- src/styles.scss
	@import '~carbon-components/scss/globals/scss/styles';
- tslint.json
	copy carbon recommended code styles from docs
- apply code styles
	ng lint --fix
- add Progressive web app support
	src/sw.js
	copy from docs
- to register our service worker and use it to cache files locally
	src/index.html
	copy from docs
- src/manifest.json
	copy from docs
- add sw.js and manifest.json into our asset entities (build & test) in angular.json
	"assets": [
	  "src/favicon.ico",
	  "src/assets",
	  "src/sw.js",
	  "src/manifest.json"
	],
- reference the manifest.json and theme-color in the index.html <head> tags
	<link rel="manifest" href="manifest.json" />
	<meta name="theme-color" content="#ffff00" />
- ng g component header --lint-fix

- Using carbon icon
	- search for icon in library https://www.carbondesignsystem.com/guidelines/icons/library/
	- e.g. to add icon named "Notification"

	1. import icon <IconName>Module e.g. NotificationModule
  app/app.module.ts
  	import { NotificationModule } from '@carbon/icons-angular';
  	
  	imports: [
		BrowserModule,
		AppRoutingModule,
		UIShellModule,
		NotificationModule,
	],
	
	2. Use icon named ibmIcon<IconName> e.g. ibmIconNotification
  app/header/header.component.html
	<ibm-header-action title="action">
		<svg ibmIconNotification size="20"></svg>		// prefix "ibmIcon" with icon name
		<!--svg icon ibmIconNotification20></-->		// old. not supported in icons-angular: "^11.0.1"
	</ibm-header-action>
	
Create pages
------------
- add a home page
	ng g module home --routing --lint-fix		// generates app/home/home.module.ts and app/home/home-routing.module.ts
	ng g component home/landing-page --lint-fix
- add a repo page
	ng g module repositories --routing --lint-fix
	ng g component repositories/repo-page --lint-fix
	
src/app/home
├── landing-page
│   ├── landing-page.component.html
│   ├── landing-page.component.scss
│   ├── landing-page.component.spec.ts
│   └── landing-page.component.ts
├── home-routing.module.ts
└── home-page.module.ts

src/app/repositories
├── repo-page
│   ├── repo-page.component.html
│   ├── repo-page.component.scss
│   ├── repo-page.component.spec.ts
│   └── repo-page.component.ts
├── repositories-routing.module.ts
└── repositories.module.ts

Add routing
-----------
- src/app-routing.module.ts
	const routes: Routes = [
	  {
		path: '', loadChildren: () => import('./home/home.module').then((m) => m.HomeModule),
	  },
	  {
		path: 'repos', loadChildren: () => import('./repositories/repositories.module').then(
				(m) => m.RepositoriesModule ),
	  },
	];
- modify the NgModule declaration to use the hash router:
	@NgModule({
	  imports: [RouterModule.forRoot(routes, { useHash: true })],
	  exports: [RouterModule],
	})
	export class AppRoutingModule {}
- src/app/home/home-routing.module.ts
	import { LandingPageComponent } from './landing-page/landing-page.component';
	
	const routes: Routes = [
	  {
		path: '',
		component: LandingPageComponent,
	  },
	];
- src/app/repositories/repositories-routing.module.ts
	import { RepoPageComponent } from './repo-page/repo-page.component';
	
	const routes: Routes = [
	  {
		path: '',
		component: RepoPageComponent
	  }
	];
- fixes to the UI Shell to have it route to the repo page.
  src/app/header/header.component.html
	<ibm-header [route]="['/']" name="Carbon Tutorial Angular">
		<ibm-header-navigation ariaLabel="Carbon Tutorial Angular">
			<ibm-header-item [route]="['/repos']">Repositories</ibm-header-item>
			

React
=======
https://www.carbondesignsystem.com/developing/react-tutorial/overview/
https://www.carbondesignsystem.com/components/overview/
https://react.carbondesignsystem.com/?path=/docs/getting-started--using-the-storybook

spacing token table https://www.carbondesignsystem.com/guidelines/spacing/overview/#spacing-scale
color https://www.carbondesignsystem.com/guidelines/color/usage/
Typography tokens https://www.carbondesignsystem.com/guidelines/typography/productive/
