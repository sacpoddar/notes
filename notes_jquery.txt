Adding JQuery to web page 
	<head>
		<script type="js/jquery-2.1.1.min.js"></script>
	</head>
	OR
	<head>
		<script src="http://code.jquery.com/jquery-2.1.1.min.js"></script>
	</head>

Basic syntax is: $(selector).action()
	A $ sign to define/access jQuery
	A (selector) to "query (or find)" HTML elements
	A jQuery action() to be performed on the element(s)

Examples:
$(this).hide() - hides the current element.
$("p").hide() - hides all <p> elements.
$(".test").hide() - hides all elements with class="test".
$("#test").hide() - hides the element with id="test".

// wait for the document to be fully loaded 
$(document).ready(function(){
   // jQuery methods go here...
});
// same as..
$(function(){
   // jQuery methods go here...
});

// When a user clicks on a button, all <p> elements will be hidden:
$(document).ready(function(){
  $("button").click(function(){
    $("p").hide();
  });
});

// More jQuery Selectors
$("*")	Selects all elements	Try it
$(this)	Selects the current HTML element	Try it
$("p.intro")	Selects all <p> elements with class="intro"	Try it
$("p:first")	Selects the first <p> element	Try it
$("ul li:first")	Selects the first <li> element of the first <ul>	Try it
$("ul li:first-child")	Selects the first <li> element of every <ul>	Try it
$("[href]")	Selects all elements with an href attribute	Try it
$("a[target='_blank']")	Selects all <a> elements with a target attribute value equal to "_blank"	Try it
$("a[target!='_blank']")	Selects all <a> elements with a target attribute value NOT equal to "_blank"	Try it
$(":button")	Selects all <button> elements and <input> elements of type="button"	Try it
$("tr:even")	Selects all even <tr> elements	Try it
$("tr:odd")	Selects all odd <tr> elements

$("input").focus(function(){
  $(this).css("background-color","#cccccc");
});

// hide()/show() syntax
$(selector).hide(speed,callback);	// speed -  "slow", "fast", or milliseconds.
$(selector).show(speed,callback);	// callback - function to be executed after hide/show completes.

$("#show").click(function(){
  $("p").show("slow");
});

// toggle() syntax
$(selector).toggle(speed,callback);

$("button").click(function(){
  $("p").toggle();
});

// Effects 
$(selector).fadeIn(speed,callback);
$(selector).fadeOut(speed,callback);
$(selector).fadeToggle(speed,callback);
$(selector).fadeTo(speed,opacity,callback);	// value between 0 and 1

// Slide
$(selector).slideDown(speed,callback);
$(selector).slideUp(speed,callback);
$(selector).slideToggle(speed,callback);

// Animate
$(selector).animate({params},speed,callback);

$("button").click(function(){
  $("div").animate({ left:'250px', opacity:'0.5',height:'150px',  width:'150px'});
}); 

// Stop an animation
$(selector).stop(stopAll,goToEnd);

// callback
$("button").click(function(){
  $("p").hide("slow", function(){ alert("The paragraph is now hidden");} );
});

// Method Chaining
To chain an action, you simply append the action to the previous action.
Tip: This way, browsers do not have to find the same element(s) more than once.

$("#p1").css("color","red")
	.slideUp(2000)
	.slideDown(2000);

// get and set
text(textToSet) - Sets or returns the text content of selected elements
html(htmlToset) - Sets or returns the content of selected elements (including HTML markup)
val(valToSet) - Sets or returns the value of form fields
attr(key,value)	- Set or get attribute value

<p id="test"> <b>Hi</b> there </p>
$("#test").text();		// Hi there
$("#test").html()		// <b>Hi</b> there
$("#fld1").val()		// India
$("#w3s").attr("href")	// http://www.w3schools.com

$("#test1").text("Hello world!");	//set
$("#test2").html("<b>Hello world!</b>");	
$("#test3").val("Dolly Duck");

$("button").click(function(){
  $("#w3s").attr("href","http://www.w3schools.com/jquery");
});

$("button").click(function(){
  $("#w3s").attr({
    "href" : "http://www.w3schools.com/jquery",
    "title" : "W3Schools jQuery Tutorial"
  });
});

// add and remove
append() - Inserts content at the end of the selected elements
prepend() - Inserts content at the beginning of the selected elements
after() - Inserts content after the selected elements
before() - Inserts content before the selected elements

remove() - Removes the selected element (and its child elements)
empty() - Removes the child elements from the selected element

$("p").append("Some appended text.");

function appendText()
{
var txt1="<p>Text.</p>";               // Create element with HTML  
var txt2=$("<p></p>").text("Text.");   // Create with jQuery
var txt3=document.createElement("p");  // Create with DOM
txt3.innerHTML="Text.";
$("p").append(txt1,txt2,txt3);         // Append multiple new elements 
}

$("#div1").remove();	// 	removes the selected element(s) and its child elements
$("p").remove(".italic");	// removes all <p> elements with class="italic":  

// CSS
addClass() - Adds one or more classes to the selected elements
removeClass() - Removes one or more classes from the selected elements
toggleClass() - Toggles between adding/removing classes from the selected elements
css() - Sets or returns the style attribute

.important
{
font-weight:bold;
font-size:xx-large;
}
.blue
{
color:blue;
}

 $("h1,h2,p").addClass("blue");			
 $("#div1").addClass("important blue");		// specify multiple classes
 $("h1,h2,p").removeClass("blue");
 $("h1,h2,p").toggleClass("blue");
 
 $("p").css("background-color");	// return the background-color value of the FIRST matched element:
 $("p").css("background-color","yellow");	//set
 $("p").css({"background-color":"yellow","font-size":"200%"});	// set multiple properties
 
// Dimensions
width()		// sets or returns the width of an element
height()	// sets or returns the height of an element
innerWidth()	// width + padding
innerHeight()	
outerWidth()	// width + padding + border
outerHeight()
outerWidth(true)	// width + padding + border + margin
outerHeight(true)

$("#div1").width()	// get
$("#div1").width(500).height(500);	// set

// traversal
parent()	// returns the direct parent element of the selected element.
parents()	// returns all ancestor elements of the selected element, all the way up to the document's root element (<html>).
parentsUntil()	// returns all ancestor elements between two given arguments.

children()	// returns all direct children of the selected element.
find()		// returns descendant elements of the selected element, all the way down to the last descendant

siblings()	// returns all sibling elements of the selected element.
next()		// returns the next sibling element of the selected element.
nextAll()	// returns all next sibling elements of the selected element
nextUntil()	// returns all next sibling elements between two given arguments.
prev()
prevAll()
prevUntil()

$("div").children("p.1");	// returns all <p> elements with the class name "1", that are direct children of <div>
$("div").find("span");		// returns all <span> elements that are descendants of <div>
$("div").find("*");			// returns all descendants of <div>

first()		// returns the first element of the selected elements
last()			// returns the last element of the selected elements.
eq()		// returns an element with a specific index number of the selected elements
filter() 	// lets you specify a criteria. elements that match will be returned
not() 		// returns all elements that do not match the criteria.	

$("div p").first();	//  selects the first <p> element inside the first <div> element
$("div p").last();	// 	selects the last <p> element inside the last <div> element
$("p").eq(1);			// selects the second <p> element (index number 1).  index numbers start at 0
$("p").filter(".intro");			// returns all <p> elements with class name "intro"
$("p").not(".intro");		// returns all <p> elements that do not have class name "intro"

load() 		// loads data from a server and puts the returned data into the selected element.
Syntax:	$(selector).load(URL,data,callback);
	The required URL parameter specifies the URL you wish to load.
	The optional data parameter specifies a set of querystring key/value pairs to send along with the request.
	The optional callback parameter is the name of a function to be executed after the load() method is completed.

$("#div1").load("demo_test.txt");		// loads the content of the file "demo_test.txt" 
$("#div1").load("demo_test.txt #p1");	// 	loads the content of the element with id="p1", inside the file "demo_test.txt"

callback function can have different parameters:
	responseTxt - contains the resulting content if the call succeed
	statusTxt - contains the status of the call
	xhr - contains the XMLHttpRequest object

$("button").click(function(){
  $("#div1").load("demo_test.txt",function(responseTxt,statusTxt,xhr){
    if(statusTxt=="success")
      alert("External content loaded successfully!");
    if(statusTxt=="error")
      alert("Error: "+xhr.status+": "+xhr.statusText);
  });
});

$.get() 		//  requests data from the server with an HTTP GET request.
Syntax:	$.get(URL,callback);		//  callback parameter is the name of a function to be executed if the request succeeds.

$("button").click(function(){
  $.get("demo_test.asp",function(data,status){
    alert("Data: " + data + "\nStatus: " + status);
  });
});

$.post() 		// requests data from the server using an HTTP POST request.
Syntax:	$.post(URL,data,callback);

$("button").click(function(){
  $.post("demo_test_post.asp",
  {
    name:"Donald Duck",
    city:"Duckburg"
  },
  function(data,status){
    alert("Data: " + data + "\nStatus: " + status);
  });
});




