Angular
=======

https://angular.io/start

Setup
-----
1. Install Node JS 
	https://nodejs.org/en/
 - or
	npm install -g npm stable	// upgrade npm
	npm install -g node@12.16.1	// upgrade node to a specific LTS
2. Install the Angular CLI
	npm install -g @angular/cli
	npm link @angular/cli			// required in gitbash so that npm knows where ng is
3. Create a workspace and initial application
	ng new my-app
4. Run the application
	cd my-app
	ng serve --open		// on npm start
5. build
	ng build --prod		// or npm run-script build --prod
	
- Generate
	ng generate component component-name
	ng generate service service-name
	
SOP: same-origin policy
-------------
  A web browser allows scripts contained in a first web page to access data in a second web page, only if both web pages have the same origin.
- An origin is defined as a combination of URI scheme, host name, and port number. 
- This policy prevents a malicious script on one page from obtaining access to sensitive data on another web page through that page's Document Object Model.

CORS: Cross-Origin Resource Sharing
-------------
- technique for relaxing the same-origin policy
- This standard extends HTTP with a new Origin request header and a new Access-Control-Allow-Origin response header.
- It allows servers to use a header to explicitly list origins that may request a file or to use a wildcard and allow a file to be requested by any site. 

E.g.  Client(Angular) ---> Server (Python REST)

On server
1. pip install -U flask-cors		// install flask-cors
2. In server.py
  app = Flask(__name__)
  CORS(app)					// allow CORS on all path

===============

- Angular is an app-design framework and development platform for building  single-page apps.

- Five common features of Angular's template syntax:
	*ngFor
	*ngIf
	Interpolation {{ }}		// lets you render the property value as text
	Property binding [ ]	// lets you interpolate values computed from application data into the HTML
	Event binding ( )		// lets your app respond to user input by updating your application data

- Modules:
- an Angular app is defined by a set of NgModules. NgModules are basic building blocks.
- Every Angular app has a root module, conventionally named AppModule, resides in app.module.ts
- You launch your app by bootstrapping the root NgModule
- NgModules can import functionality from other NgModules
- @NgModule() decorator identifies the class as a NgModule

- Components:  Define areas of responsibility in the user interface, or UI, that let you reuse sets of UI functionality.
- @Component() decorator identifies the class as a component
- A component consists of three things:
	A component class. ( *.component.ts)
	An HTML template. (*.component.html)
	Component-specific styles. (*.component.css)
- A template combines HTML with Angular markup that can modify HTML elements before they are displayed.
	
- Routing: The Angular Router NgModule provides a service that lets you define a navigation path among the different application states and view hierarchies in your app.
	The router enables navigation from one view to the next as users perform tasks such as clicking links on the page to navigate to a new page
	To define navigation rules, you associate navigation paths with your components
	
- Services:  A service is an instance of a class that you can make available to any part of your application using Angular's dependency injection system.
- Services are the place where you share data between parts of your application.
- @Injectable - decorator provides the metadata that allows other providers to be injected as dependencies into your class

NgModule metadata
---------------
most important properties are -
- declarations: The components, directives, and pipes that belong to this NgModule.
- exports: The subset of declarations that should be visible and usable in the component templates of other NgModules.
- imports: Other modules whose exported classes are needed by component templates declared in this NgModule.
- providers: Creators of services that this NgModule contributes to the global collection of services; they become accessible in all parts of the app. (You can also specify providers at the component level, which is often preferred.)
- bootstrap: The main application view, called the root component, which hosts all other app views. Only the root NgModule should set the bootstrap property.

src/app/app.module.ts

import { NgModule }      from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
@NgModule({
  imports:      [ BrowserModule ],
  providers:    [ Logger ],
  declarations: [ AppComponent ],
  exports:      [ AppComponent ],
  bootstrap:    [ AppComponent ]
})
export class AppModule { }

