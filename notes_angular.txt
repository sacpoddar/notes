Angular
=======

https://angular.io/start

Setup
-----
1. Install Node JS 
	https://nodejs.org/en/
 - or
	npm install -g npm stable	// upgrade npm
	npm install -g node@12.16.1	// upgrade node to a specific LTS
2. Install the Angular CLI
	npm install -g @angular/cli
	npm link @angular/cli			// required in gitbash so that npm knows where ng is
3. Create a workspace and initial application
	ng new my-app
4. Run the application
	cd my-app
	ng serve --open		// on npm start
5. build
	ng build --prod		// or npm run-script build --prod
	
- Generate
	ng generate component component-name
	ng generate service service-name
	
SOP: same-origin policy
-------------
  A web browser allows scripts contained in a first web page to access data in a second web page, only if both web pages have the same origin.
- An origin is defined as a combination of URI scheme, host name, and port number. 
- This policy prevents a malicious script on one page from obtaining access to sensitive data on another web page through that page's Document Object Model.

CORS: Cross-Origin Resource Sharing
-------------
- technique for relaxing the same-origin policy
- This standard extends HTTP with a new Origin request header and a new Access-Control-Allow-Origin response header.
- It allows servers to use a header to explicitly list origins that may request a file or to use a wildcard and allow a file to be requested by any site. 

E.g.  Client(Angular) ---> Server (Python REST)

On server
1. pip install -U flask-cors		// install flask-cors
2. In server.py
  app = Flask(__name__)
  CORS(app)					// allow CORS on all path

===============

- Angular is an app-design framework and development platform for building  single-page apps.

- Five common features of Angular's template syntax:
	*ngFor					// iterate over a list
	*ngIf					// 
	Interpolation {{ }}		// lets you render the property value as text
	Property binding [ ]	// lets you interpolate values computed from application data into the HTML
	Event binding ( )		// lets your app respond to user input by updating your application data

- Modules:
- an Angular app is defined by a set of NgModules. NgModules are basic building blocks.
- Every Angular app has a root module, conventionally named AppModule, resides in app.module.ts
- You launch your app by bootstrapping the root NgModule
- NgModules can import functionality from other NgModules
- @NgModule() decorator identifies the class as a NgModule

- Components:  A component controls a patch of screen called a view.
- @Component() decorator identifies the class as a component
- A component consists of three things:
	A component class. ( *.component.ts)
	An HTML template. (*.component.html)
	Component-specific styles. (*.component.css)
- A template combines HTML with Angular markup that can modify HTML elements before they are displayed.
	
- Routing: The Angular Router NgModule provides a service that lets you define a navigation path among the different application states and view hierarchies in your app.
	The router enables navigation from one view to the next as users perform tasks such as clicking links on the page to navigate to a new page
	To define navigation rules, you associate navigation paths with your components
	
- Services:  A service is an instance of a class that you can make available to any part of your application using Angular's dependency injection system.
- Services are the place where you share data between parts of your application.
- @Injectable - decorator provides the metadata that allows other providers to be injected as dependencies into your class

NgModule metadata
---------------
most important properties are -
- declarations: The components, directives, and pipes that belong to this NgModule.
- exports: The subset of declarations that should be visible and usable in the component templates of other NgModules.
- imports: Other modules whose exported classes are needed by component templates declared in this NgModule.
- providers: Creators of services that this NgModule contributes to the global collection of services; they become accessible in all parts of the app. (You can also specify providers at the component level, which is often preferred.)
- bootstrap: The main application view, called the root component, which hosts all other app views. Only the root NgModule should set the bootstrap property.

	src/app/app.module.ts

	import { NgModule }      from '@angular/core';
	import { BrowserModule } from '@angular/platform-browser';
	@NgModule({
	  imports:      [ BrowserModule ],
	  providers:    [ Logger ],
	  declarations: [ AppComponent ],
	  exports:      [ AppComponent ],
	  bootstrap:    [ AppComponent ]
	})
	export class AppModule { }

Component metadata
-------------------
- selector: A CSS selector that tells Angular to create and insert an instance of this component wherever it finds the corresponding tag in template HTML
	- By convention, Angular component selectors begin with the prefix app-, followed by the component name.
- templateUrl: The module-relative address of this component's HTML template.
- providers: An array of providers for services that the component requires
- NOTE: component definition also exports the class

	src/app/hero-list.component.ts

	@Component({
	  selector:    'app-hero-list',
	  templateUrl: './hero-list.component.html',
	  providers:  [ HeroService ]
	})
	export class HeroListComponent implements OnInit {

Template
----------
- A template looks like regular HTML, except that it also contains Angular template syntax, which alters the HTML based on your app's logic and the state of app and DOM data.
- Your template can use data binding to coordinate the app and DOM data

	src/app/hero-list.component.html

	<h2>Hero List</h2>
	<p><i>Pick a hero from the list</i></p>
	<ul>
	  <li *ngFor="let hero of heroes" (click)="selectHero(hero)">
		{{hero.name}}
	  </li>
	</ul>
	<app-hero-detail *ngIf="selectedHero" [hero]="selectedHero"></app-hero-detail>

- The *ngFor directive tells Angular to iterate over a list.
- {{hero.name}}, (click), and [hero] bind program data to and from the DOM, responding to user input
- <app-hero-detail> tag in the example is an element that represents a new component, HeroDetailComponent

Data binding
------------
- four forms of data binding markup
			---{{value}}------------->
Component	---[property]= 'value'---->		DOM
			<--(event) = 'handler'----
			<--[(ng-model)]= 'prop'-->
			
- {{hero.name}} interpolation displays the component's hero.name property value within the <li> element.
- [hero] property binding passes the value of selectedHero from the parent HeroListComponent to the hero property of the child HeroDetailComponent.
- (click) event binding calls the component's selectHero method when the user clicks a hero's name.

- Two-way data binding combines property and event binding in a single notation.

	src/app/hero-detail.component.html
		  
	<input [(ngModel)]="hero.name">

Pipes
-----
- let you declare display-value transformations in your template HTML
- A class with the @Pipe decorator defines a function that transforms input values to output values for display in a view.
- {{interpolated_value | pipe_name}}
- You can chain pipes
- A pipe can also take arguments that control how it performs its transformation
	 <p>Today is {{today | date}}</p>			<!-- Default format: output 'Jun 15, 2015'-->
	 <p>The date is {{today | date:'fullDate'}}</p>		<!-- fullDate format: output 'Monday, June 15, 2015'-->

Directives
-----------
- When Angular renders templates , it transforms the DOM according to the instructions given by directives.
- you can define your own directive using the @Directive() decorator
- A component is technically a directive. 
- @Component() decorator extends the @Directive() decorator with template-oriented features
- In addition to components, there are two other kinds of directives: structural and attribute.

- Structural directives alter layout by adding, removing, and replacing elements in the DOM. 
	<li *ngFor="let hero of heroes"></li>
	<app-hero-detail *ngIf="selectedHero"></app-hero-detail>
- *ngFor - iterative. Stamp out one <li> per hero in the heroes list
- *ngIf - conditional. Includes the HeroDetail component only if a selected hero exists.

- Attribute directives alter the appearance or behavior of an existing element
	<input [(ngModel)]="hero.name">
	
Services
--------
- A service is typically a class with a narrow, well-defined purpose. 
- Ideally, a component's job is to enable the user experience and nothing more. A component should present properties and methods for data binding, in order to mediate between the view (rendered by the template) and the application logic (which often includes some notion of a model).
- A component can delegate certain tasks to services, such as fetching data from the server, validating user input, or logging directly to the console.
- By defining such processing tasks in an injectable service class, you make those tasks available to any component.

	src/app/logger.service.ts
	
	export class Logger {
	  log(msg: any)   { console.log(msg); }
	  error(msg: any) { console.error(msg); }
	  warn(msg: any)  { console.warn(msg); }
	}
	
- Services can depend on other services
- @Injectable() decorator - to make a service injectable

Dependency injection (DI)
------------------------
- The injector is the main mechanism. Angular creates an application-wide injector for you during the bootstrap process, and additional injectors as needed. You don't have to create injectors.
- An injector creates dependencies, and maintains a container of dependency instances that it reuses if possible.
- A provider is an object that tells an injector how to obtain or create a dependency.
- For any dependency that you need in your app, you must register a provider with the app's injector, so that the injector can use the provider to create new instances.
- A dependency doesn't have to be a serviceâ€”it could be a function, for example, or a value.

- When Angular creates a new instance of a component class, it determines which services or other dependencies that component needs by looking at the constructor parameter types. e.g.
	constructor(private service: HeroService) { }
- When Angular discovers that a component depends on a service, it first checks if the injector has any existing instances of that service. If a requested service instance doesn't yet exist, the injector makes one using the registered provider, and adds it to the injector before returning the service to Angular.
- When all requested services have been resolved and returned, Angular can call the component's constructor with those services as arguments.

Providing services
------------------
- You must register at least one provider of any service you are going to use. 
- You register providers 
	- in the metadata of the service (in the @Injectable() decorator), or 
	- in the @NgModule() or 
	- @Component() metadata
- By default, the Angular CLI command "ng generate service" registers a provider with the root injector for your service by including provider metadata in the @Injectable() decorator.
	@Injectable({
	 providedIn: 'root',
	})
- at the root level, Angular creates a single, shared instance of HeroService and injects it into any class that asks for it.
- When you register a provider with a specific NgModule, the same instance of a service is available to all components in that NgModule.
	@NgModule({
	  providers: [
	  BackendService,
	  Logger
	 ],
	 ...
	})
- When you register a provider at the component level, you get a new instance of the service with each new instance of that component.
	@Component({
	  selector:    'app-hero-list',
	  templateUrl: './hero-list.component.html',
	  providers:  [ HeroService ]
	})
