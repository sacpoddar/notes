Advanced JavaScript Notes
=========================

Using Constructors to Define Types
---------------------
- A constructor is a function that get invoked when creating an Objects
- You invoke a constructor with the "new" keyword.
- The constructor returns a reference to the object it constructed.
- Within constructor use "this" keyword to refer to current Objects properties
- type of all objects created with a custom constructor is object. 
- There are only six types in JavaScript: object, function, string, number, boolean, and undefined

	function Emp(name, city) {
		this.name = name;
		this.city = city;
	}
	
	var emp1 = new Emp('sac1', 'pune');
	console.log(emp1.name);			// sac1

Prototypes and Prototype Inheritance
-------------------------
- "prototype" is a property of functions and of objects that are created by constructor functions.
- You can use the prototype property to add properties and methods to objects. This is also impact existing objects
	Emp.prototype.phone = 12345;
	console.log("phone: " + emp1.phone);	// 12345
	
- You can even add properties and methods to predefined objects.
	// using prototypes to add prop on existing types
	String.prototype.trim = function()  
	{  
		return this.replace(/(^\s*)|(\s*$)/g, "");  // trim leading and trailing spaces
	}  
	var s = "  spaces    ";  
	console.log(s + " (" + s.length + ")");   //"    leading and trailing spaces     (35)"  
	s = s.trim();  
	console.log(s + " (" + s.length + ")");   // "leading and trailing spaces (27)" 
	
- You can derive One Object from another with Object.create() and prototype
	var emp2 = Object.create( Object.getPrototypeOf(Emp), {
		// add new properties
		"pin" : { value : 411111} 
	}); 
	console.log("pin " + emp2.pin);		// 411111
	
- Changing an Object's Prototype-
- you can replace the internal prototype of an object or function by using the _proto_ property.
- That also inherits properties and methods of the new prototype along with other properties 
	and methods in its prototype chain.

	// prototype chaining
	function Circle() {
		this.name = "circle1";
	}
	function Square() {
		this.name = "square1";
	}
	var circle = new Circle();
	circle.radius = 2;
	var square = new Square();
	var shape = new Object();
	shape.area = 123;
	shape.__proto__ = circle;
	console.log(shape.name );   // circle1
	console.log(shape.area );   // 123
	console.log(shape.radius );   // 2
	shape.__proto__ = square;
	console.log(shape.name );   // square1
	console.log(shape.area );   // 123
	console.log(shape.radius );   // undefined

Data Properties
----------------
- A data property is a property that has a value.
- You can add one or more data properties in an object
- different ways to add data property
	var emp1 = {        // 1. using object literal notation
		name: "sac1"
	};
	
	var emp2 = {};      // var emp2 = new Object();
	emp2.name = "sac2"; // 2. using assignment operator
	
	function Emp(name) {    // 3. using construction function
		this.name = name;
	}
	var emp3 = new Emp('sac3');
	
	// 4. creating data property using Object.defineProperty()
	var emp4 = {};
	Object.defineProperty(emp4, 'name', {
		value: 'sac4'
	});
	
- Object.defineProperty() adds a property to an object, or modifies attributes of an existing property.
	syntax:
	Object.defineProperty(object, PropertyKey, PropertyDescriptor)
	
- PropertyDescriptor is used to set data property attributes. Data property has four attributes
	value - The current value of the property. default-	undefined
	writable - true or false. If true, the property value can be modified. default- false
	enumerable - true or false. If true, the property can be enumerated by a for...in statement.
				default- false
	configurable- true or false. If true, property attributes can be changed, 
				and the property can be deleted. default- false

- If you add data property using first three methods by default writable,enumerable,configurable will be set to true
- If you add data property using Object.defineProperty(), Object.defineProperties() , Object.create()
	by default writable,enumerable,configurable will be set to false
- When you modify the property, attributes that are not specified in the descriptor remain the same.
- You can get PropertyDescriptor by using Object.getOwnPropertyDescriptor()
	console.log(Object.getOwnPropertyDescriptor(emp1, 'name'));
	console.log(Object.getOwnPropertyDescriptor(emp2, 'name'));
	console.log(Object.getOwnPropertyDescriptor(emp3, 'name'));
	console.log(Object.getOwnPropertyDescriptor(emp4, 'name'));
	
	{ value: 'sac1',
	  writable: true,
	  enumerable: true,
	  configurable: true }
	{ value: 'sac2',
	  writable: true,
	  enumerable: true,
	  configurable: true }
	{ value: 'sac3',
	  writable: true,
	  enumerable: true,
	  configurable: true }
	{ value: 'sac4',
	  writable: false,
	  enumerable: false,
	  configurable: false }
  
Accessor Properties
------------------
- Accessor property has get and set attributes which calls user defined functions when property is retrived or set
- 	// 1. creating Accessor property using Object.defineProperty()
	var emp1 = {};
	Object.defineProperty(emp1, 'name', {
		get : function() {
			return this._name; 
		},
		set : function(value) {
			this._name = value + "23";
			// this.name = value; // will give RangeError: Maximum call stack size exceeded
			// because it will invoke itself (set function)
		}
	});
	emp1.name = 'sac1';     // this will call set function
	console.log(emp1);      // { _name: 'sac123' }
	console.log(Object.getOwnPropertyDescriptor(emp1)); // undefined
	
	emp1._name = 'sac2'; 
	console.log(emp1);      // { _name: 'sac2' } NOTE: set function is not called

- When a get accessor is undefined and you access the property value, the value undefined is returned. 
- When a set accessor is undefined and you assign a value to the accessor property, nothing occurs.
- PropertyDescriptor for Accessor property can have four attributes. 
	get	- A function that returns the property value. The function has no parameters. Optional, default- undefined
	set	- A function that sets the property value. 
			It has one parameter that contains the value to be assigned. Optional, default- undefined
	enumerable - true or false. If true, the property can be enumerated by a for...in statement. default- false
	configurable - true or false. If true, property attributes can be changed, 
				and the property can be deleted. default- false

- You can modify getters and setters to perform other taks 
	e.g. perform validation, execute a handler, or fire an event.
- You can change a data property to an accessor property, and vice-versa. 
	- If you do this, configurable and enumerable attributes that are not specified in the descriptor are preserved
	in the property. Other attributes that are not specified in the descriptor are set to their default values.
- You can incrementally define configurable accessor properties by using multiple calls to the Object.defineProperty(). 
- Use Object.seal() and the Object.freeze() to prevent the modification of property attributes.

	// 2. creating Accessor property using ES5 object literal notation
	var emp2 = {
		get name() {
			return this._name;  // _ prefixed variable names are considered private by convention but are still public.
		},
		set name(value) {
			this._name = value + "23";
		}
	};
	emp2.name = 'sac1';
	console.log(emp2);          // { name: [Getter/Setter], _name: 'sac123' }
	console.log(Object.getOwnPropertyDescriptor(emp2)); // undefined

Using Closures to Create Private Variables
-------------------------------

	// Using Closures to Create Private Variables
	function Emp() {
		var _name;	// private 
	
		// returns an object literal with getter/setter
		return {
			get name() {
				return this._name;
			},
			set name(value) {
				this._name = value + "23";
			}
		}
	};
	emp3 = new Emp();
	emp3.name = 'sac1';
	console.log(emp3);          // { name: [Getter/Setter], _name: 'sac123' }
	console.log(Object.getOwnPropertyDescriptor(emp3)); // undefined


Variable Scope
----------------
global variable - declared outside function
				- implicitly declared inside function i.e. without var
local variable - declared inside function

- A local variable can have the same name as global variable.  
	var v1 = "global";
	function f1(){
		var v1 = "local"; 	// overrides global
		console.log(v1);
		g1 = "global g1";   // implicitly declared. global variable
	}
	f1();				// local
	console.log(v1);	// global
	console.log(g1);    // global g1

- variables are evaluated as if they were declared at the beginning of the scope they exist in
	var v2 = "global v2";
	function f2(){
		console.log(v2);		// JS knows that v2 is defined locally. It will set its default value- undefined
		var v2 = "local v2";
		console.log(v2);
	}
	f2();				// undefined
						// local v2
	console.log(v2);	// global v2
	
Closure
-----------
- an inner function stores references to the local variables of its enclosing scope, even after the function returns. 
	// closure ex1
	function fun1(name) {
		return function f1() {
			console.log(name);
		}
	}
	var func = fun1("closure 1");
	func();     // closure 1
	
	// closure ex2
	function Emp(value) {
	
		// returns an object literal with getter/setter
		return {
			get name() {
				return value;
			},
			set name(newVal) {
				value = newVal + "23";
			}
		}
	};
	var emp3 = new Emp('sac');
	console.log(emp3.name);     // sac
	emp3.name = 'sac1';
	console.log(emp3.name);     // sac123
	
By Value vs. By Reference
---------------
- Numbers and Boolean values (true and false) are copied, passed, and compared by value. 
- Objects, arrays, and functions are copied, passed, and compared by reference. Like Java
- strings are copied and passed by reference, but are compared by value.
	Note that if you have two String objects (created with new operator), they are compared by reference, 
	but if one or both of the values is a string value, they are compared by value.
	
Objects as Associative Arrays
-------------------------
- You can use index operator ([]) to access an object's properties.
- In this case you are treating the object as an associative array in which data values are associated with strings.
	var emp = {
		name : "sac",
		age : 32
	}
	// index is a string literal that represents the property name.
	console.log(emp["name"]);		// sac

Collections
-----------
- Set - to store unique values of any type. Use forEach to iterate collection.
	- add(value : anyType)
- Map - to store key/value pair. Use forEach to iterate collection.
	- set(key : anyType, value : anyType)
- WeakMap - to store key/value pair. forEach NOT supported. Use get() to retrieve elements. Useful for caching.
	- set(key : object, value : anyType)
	- useful where cached objects are very large and you don't want to hold objects in memory unnecessarily
	
	var s = new Set();
	s.add("one");
	s.add("two");
	s.add("two");   // will ignore duplicate
	s.add(3);
	console.log("size = " + s.size);
	s.forEach(function(value){
		console.log(value);
	});
	// OR, using arrow function
	s.forEach( (value) => console.log(value));  
	
	var map = new Map();
	map.set("one", "ONE");
	map.set("two", "TWO");
	map.set("two", "TWO2"); // will ignore duplicate
	map.set(3, "THREE");
	console.log("size = " + map.size);
	map.forEach(function(value, key, mapInner){
		console.log(key + " " + value);
	});

	var weakmap = new WeakMap();
	var one = new String("one");
	var two = new String("two");
	weakmap.set(one, "ONE");
	weakmap.set(two, "TWO");
	// weakmap.set("three", "THREE");	// ERROR: string literal cannot be used as key
	console.log( weakmap.get(two));
	

ES5 New features
================
- "use strict"
    - "use strict" defines that the JavaScript code should be executed in "strict mode".
    - Strict mode makes it easier to write "secure" JavaScript.
    - Using a variable, without declaring it, is not allowed. 
    - in normal mistyping a variable name creates a new global variable. In strict mode, this will throw an error
    - any assignment to a non-writable property, a getter-only property, a non-existing property, 
        a non-existing variable, or a non-existing object, will throw an error
    - Deleting a variable (or object), function is not allowed.
    - Octal numeric literals are not allowed
    
    "use strict";
    y = 10;             // ReferenceError: y is not defined
    
    const obj = {get x() {return 0} };
    obj.x = 3.14;       // TypeError: Cannot set property x of #<Object> which has only a getter 

- Property Getters and Setters
    var person = {
        firstName: "John",
        lastName: "Doe",
        language: "NO",
        get lang() {
            return this.language;
        },
        set lang(value) {
            this.language = value;
        }
    };

    // Set an object property using a setter:
    person.lang = "en";

- trailing commas in object and array definitions
    person = { name: "Sac", age: 46,}
    arr = [ 1, 2, 3, ]
    // NOTE: JSON does not allow trailing commas.
    
- Property Access on Strings
    var str = "HELLO WORLD";
    console.log( str.charAt(0) );   // H
    console.log( str[0] );          // H  - Added in ES5

- String.trim()      // removes whitespace from both sides of a string.
    console.log( str.trim() );
- JSON.parse()       // convert text to JavaScript object
  JSON.stringify()   // convert JavaScript object to string
    var personStr = '{ "name": "Sac", "age": 46}';
    person = JSON.parse(personStr);
    console.log( person )                   // print obj
    console.log( JSON.stringify(person) )   // print
- Array methods
    isArray()
    forEach()
    map()
    filter()
    reduce()
    every()
    some()
    indexOf()
    lastIndexOf()
    
    var fruits = ["Banana", "Orange", "Apple", "Mango"];
    var arr1 = [1, 2, 3, 4, 5]

    console.log( Array.isArray(fruits) );                   // true. checks whether an object is an array.
    fruits.forEach( (value) => console.log(value) );        // iterate

    fruits.forEach( function myFunc(value){                 // iterate
        console.log(value)
        })

    var arr2 = arr1.map( function myFunc(value){            // iterate and returns a new array
        return value + 1;
    });
    console.log( JSON.stringify(arr2) );    // [2, 3, 4, 5, 6]

    var arr3 = arr1.filter( function myFunc(value){         // filter based on condition and returns a new array
        return value > 3;
    });
    console.log( JSON.stringify(arr3) );    // [4,5]

    var sum = arr1.reduce( function myFunc(total, value){   // reduce and return a number
        return total + value;
    });
    console.log( sum );             // 15
    
    
ES6 New features
================

- let keyword
    - Before ES6 (2015), JavaScript had only Global Scope and Function Scope.
    - ie. Variables declared with the var keyword can NOT have block scope.
    
    function f1() {
        if(true) {
            var v2 = 2;
        }
        console.log( v2);   // prints 2
    }
    
    - Variables defined with let have Block Scope.
    - can not be redeclared in same scope
    - can be redeclared in nested block.
    
    let v1 = 2;
    let v1 = 3;     // SyntaxError
    
    function f1() {
        if(true) {
            let v2 = 2;
        }
        console.log( v2);   // ReferenceError: v2 is not defined
    }
    
    - Variables defined with var are hoisted to the top and can be initialized at any time
    - Variables defined with let are also hoisted to the top of the block, but must be initialized before use.
    
    "use strict"
    v2 = "sac2";
    console.log( v2);   // print sac2
    var v2;             // no error
    
    "use strict"
    v2 = "sac2";
    console.log( v2);   //
    let v2;             // ReferenceError: Cannot access 'v2' before initialization

    
- const keyword
    - declares a constant. must be initialized in declaration. variable cannot be Reassigned.
    - have Block Scope
    - cannot be Redeclared in same scope
    
    const PI = 3.141
    
- arrow function
    - allows a short syntax for writing function expressions
    
    var x = function (x, y) {       // old style
        return x * y;
    }
    console.log( x(2, 3) )

    const f2 = (x, y) => {      // using arrow function
        return x * y;
    }
    console.log( f2(2, 5) )
    
    const f3 = (x, y) => x * y;     // valid

    - Arrow functions do not have their own this. They are not well suited for defining object methods.
    - Arrow functions are not hoisted. They must be defined before they are used.
    - Using const is safer than using var, because a function expression is always a constant value.

    hello = () => "Hello World!";       // valid
    hello = (val) => "Hello " + val; 
    hello = val => "Hello " + val;
    
    - In regular functions the this keyword represented the object that called the function, 
        which could be the window, the document, a button or whatever.
    - With arrow functions the this keyword always represents the object that defined the arrow function.

- for/of loop
    for (let x of iterable) {      // iterable can be Array, String, Map, NodeList etc.
        console.log( x )
    }
    
- Map Objects
    - A Map object holds key-value pairs where the keys can be any datatype including Object
    - remembers the original insertion order of the keys

    new Map()	        // Creates a new Map object
    size	            // get size of map
    set(key, value)	    // Sets key, value
    get(key)	        // Get value for the key
    has(key)	        // Returns true if a key exists.
    delete(key)	        // Removes an element specified by a key.
    forEach()	        // Invokes a callback for each key/value pair. 
    keys()	            // Returns an array of the keys in a Map object
    values()	        // Returns an array of the values in a Map object
    entries()	        // Returns an array of the key/value pairs in a Map object
    clear()	            // Removes all elements in a Map
    
    // Create Objects
    const apples = {name: 'Apples'};
    const bananas = {name: 'Bananas'};

    // Create a new Map
    const fmap = new Map();

    // Add new Elements to the Map
    fmap.set(apples, 500);
    fmap.set(bananas, 300);

    console.log( fmap.size );          // 3
    console.log( fmap.get(apples) );   // 500
    console.log( fmap.has(apples) );   // true

    let keys = fmap.keys();         // MapIterator
    let values = fmap.values();     // MapIterator
    let entries = fmap.entries();   // MapIterator
    
    fmap.forEach( (value, key, map) => {     // iterate map
        console.log(value)
    });

    for(let x of keys) {        // iterate keys
        console.log(x);
    }
    for(let x of values) {      // iterate values
        console.log(x);
    }
    for(let x of entries) {
        console.log(x[0]);      // key
        console.log(x[1]);      // value
    }

    fmap.delete(apples);

- Set Objects
    - set of objects
    
    new Set()	        // Creates a new Set object
    size	            // get size of set
    add(key)	        // Adds a new element to the Set
    delete(key)	        // Removes an element specified by its value.
    has(key)	        // Returns true if a value exists
    forEach()	Invokes a callback for each element
    clear()	            // Removes all elements from a Set
    keys()	            // Returns an array of the values in a Set object
    values()	        // Same as keys()
    entries()	        // Returns an array of the values in a Set object
    
- Default Parameter Values
    - allows function parameters to have default values.
    
    function myFunction(x, y = 10) {
      // y is 10 if not passed or undefined
      return x + y;
    }
    myFunction(5); // will return 15
    
- Function Rest Parameter
    - rest parameter (...) allows a function to accept any number of arguments as an array:
    - must be the last param
    
    function sum(...args) {
      let sum = 0;
      for (let arg of args) sum += arg;
      return sum;
    }

    let x = sum(4, 9, 16, 25, 29, 100, 66, 77);
    
- Promise
    - Promise object represents the eventual completion or failure of an asynchronous operation and its resulting value
    - A Promise is in one of these states:
        pending:    initial state, neither fulfilled nor rejected.
        fulfilled:  meaning that the operation was completed successfully.
        rejected:   meaning that the operation failed.

    let a1 = 10;
    let b1 = 20;
    function div( x , y) {
        return x / y;
    }

    // promise
    let myPromise = new Promise(function(resolve, reject){
        console.log("In promise");
        if( b1 != 0) {
             // async task
            setTimeout(() => {
                console.log("executing div()");
                let res = div(a1, b1)
                resolve( res);
              }, 300);
        } else {
            reject("Error")
        }
    });

    myPromise.then(
        function(value) {
            console.log("Result = " + value);
        },
        function(error) {
            console.log(error);
        }
    );
    console.log("finished")
    
    OUT:
    In promise
    finished
    executing div()
    Result = 0.5

    - Promise methods
        Promise.all()
        Promise.allSettled()
        Promise.any()
        Promise.prototype.catch()
        Promise.prototype.finally()
        Promise.race()
        Promise.reject()
        Promise.resolve()
        Promise.prototype.then()
        
    - As the Promise.prototype.then() and Promise.prototype.catch() methods return promises, they can be chained.
        const p = new Promise((resolve, reject) => {....});
        p.then(handleResolvedA, handleRejectedA)
         .then(handleResolvedB, handleRejectedB);
        
    
- class
    - Classes are templates for JavaScript Objects.
    
    class Car {
        constructor(name, year) {
            this.name = name;
            this.year = year;
        }
        getName() {
            return this.name;
        }
        getYear() {
            return this.year;
        }
    }
    let car = new Car("nexon", 2020);
    console.log( car.getName() + " " + car.getYear() );
    
- String methods 
    str.includes("value");     // returns true if a string contains a specified value
    str.startsWith("value")
    str.endsWith("value")
- Array methods
    Array.from("ABCDEFG")       // Returns [A,B,C,D,E,F,G] 
        - returns an Array object from any object with a length property or any iterable object  
    arr.keys()                  // returns an Array Iterator object with the keys of an array.
    arr.find(criteriaFunction)  // returns first element from array that passes criteria function
    arr.findIndex(criteriaFunction)  // returns index of first element from array that passes criteria function
    function criteriaFunction(value, index, array) {
      return value > 18;
    }

- ES6 added 2 new global number methods:
    isFinite(arg)       // returns false if the argument is Infinity or NaN.
    isNaN(arg)          // returns true if the argument is NaN

- Object.entries()
    - returns an array of the key/value pairs in an object
    - This is the same as iterating with a for...in loop, except that a for...in loop enumerates 
    properties in the prototype chain as well. 
    
    const person = {
      firstName : "John",
      lastName : "Doe",
      age : 50,
    };

    for (const [key, value] of Object.entries(person)) {
      console.log(`${key}: ${value}`);
    }

    OUT:
    firstName: John
    lastName: Doe
    age: 50

- native JavaScript modules
    - dependent on the import and export statements
    - each file is its own module
    
    - export statement
        - to export live bindings to members like functions, objects, Classes, constants etc.
        - You can export members one by one. What’s not exported won’t be available directly outside the module
        
        // app.js
        export const myNumbers = [1, 2, 3, 4];
        const animals = ['Panda', 'Bear', 'Eagle'];     // Not available directly outside the module

        export default function myLogger() {            // define a default export with the default keyword
          console.log(myNumbers, pets);
        }

        export class Alligator {
          constructor() {
            // ...
          }
        }
        
        - Or you can export desired members in a single statement at the end of the module, like
            export { myNumbers, myLogger, Alligator };
        - You can also give an aliases to exported members with the as keyword:
            export { myNumbers, myLogger as Logger, Alligator }
            
    - import statement
        - to import read only live bindings which are exported by another module    
        - Imported modules are in strict mode whether you declare them as such or not
        - Bindings imported are called live bindings because they are updated by the module that exported the binding
        
        // test.js
        import { myLogger, Alligator } from './app.js';
        
        import myLogger as Logger from './app.js';      // Importing with alias
        import * as Utils from './app.js';              // Importing all exported members
            Utils.myLogger();                           // In this case use . notation to access members
        import Logger from './app.js';                  // Importing a module with a default member
        import Logger, { Alligator, myNumbers } from 'app.js';  // import non-default members on top of the default one


ES 2016 New Features
====================
- ** Exponentiation Operator
    let x = 5;
    let z = x ** 2;     // z = 25. Same as Math.pow(x,2)
    x **= 2             // x = 25. Exponentiation Assignment

- Array.includes()
    const arr = ["Banana", "Orange", "Apple", "Mango"];
    arr.includes("Mango"); // is true 


ES 2017 New Features
====================
- String Padding
    let str = "5";
    str.padStart(4,0);  // 0005
    str.padEnd(4,0);    // 5000
    
- async/await function
    - The purpose of async/await is to simplify the syntax necessary to consume promise-based APIs
    - async functions can contain zero or more await expressions
    - await expressions suspens execution until the returned promise is fulfilled or rejected, 
    making promise-returning functions behave as if its synchronous
    - return value of the await expression is resolved value of the promise
    - Async functions always return a promise. If the return value of an async function is not explicitly a promise, 
    it will be implicitly wrapped in a promise. e.g
    async function foo() {
       return 1
    }
    // similar to
    function foo() {
       return Promise.resolve(1)
    }

    - Example:
function resolveAfter2Seconds() {
    console.log("starting slow promise")
    return new Promise(resolve => {
        setTimeout(function () {
            resolve("slow")
            console.log("slow promise is done")
        }, 2000)
    })
}

function resolveAfter1Second() {
    console.log("starting fast promise")
    return new Promise(resolve => {
        setTimeout(function () {
            resolve("fast")
            console.log("fast promise is done")
        }, 1000)
    })
}

async function sequentialStart() {
    console.log('==SEQUENTIAL START==')

    // 1. Execution gets here almost instantly
    const slow = await resolveAfter2Seconds()
    console.log(slow) // 2. this runs 2 seconds after 1.

    const fast = await resolveAfter1Second()
    console.log(fast) // 3. this runs 3 seconds after 1.
}

async function concurrentStart() {
    console.log('==CONCURRENT START with await==');
    const slow = resolveAfter2Seconds() // starts timer immediately
    const fast = resolveAfter1Second() // starts timer immediately

    // 1. Execution gets here almost instantly
    console.log(await slow) // 2. this runs 2 seconds after 1.
    console.log(await fast) // 3. this runs 2 seconds after 1., immediately after 2., since fast is already resolved
}

function concurrentPromise() {
    console.log('==CONCURRENT START with Promise.all==')
    return Promise.all([resolveAfter2Seconds(), resolveAfter1Second()]).then((messages) => {
        console.log(messages[0]) // slow
        console.log(messages[1]) // fast
    })
}

async function parallel() {
    console.log('==PARALLEL with await Promise.all==')

    // Start 2 "jobs" in parallel and wait for both of them to complete
    await Promise.all([
        (async () => console.log(await resolveAfter2Seconds()))(),
        (async () => console.log(await resolveAfter1Second()))()
    ])
}

sequentialStart() // after 2 seconds, logs "slow", then after 1 more second, "fast"

// wait above to finish
setTimeout(concurrentStart, 4000) // after 2 seconds, logs "slow" and then "fast"

// wait again
setTimeout(concurrentPromise, 7000) // same as concurrentStart

// wait again
setTimeout(parallel, 10000) // truly parallel: after 1 second, logs "fast", then after 1 more second, "slow"


ES 2018 New features
====================

- Asynchronous Iteration
    for await(let x of list) {
        ...
    }
- Promise finally()

    function checkMail() {
      return new Promise((resolve, reject) => {
        if (Math.random() > 0.5) {
          resolve('Mail has arrived');
        } else {
          reject(new Error('Failed to arrive'));
        }
      });
    }

    checkMail()
      .then((mail) => {
        console.log(mail);
      })
      .catch((err) => {
        console.error(err);
      })
      .finally(() => {
        console.log('Experiment completed');
      });


    Object Rest Properties
    New RegExp Features

- Object Rest Properties
    - allows us to destruct an object and collect the leftovers onto a new object:
    let { x, y, ...z } = { x: 1, y: 2, a: 3, b: 4 };
    x; // 1
    y; // 2
    z; // { a: 3, b: 4 }

