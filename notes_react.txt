React Notes
===========

cd reactshop 
npm install -g create-react-app
npx create-react-app frontend
npx create-react-app my-app --template typescript   // with TS support
yarn add @reduxjs/toolkit react-redux           // add redux toolkit
yarn start
yarn build
yarn test
yarn eject

cd frontend
npm start		// Starts the development server.
npm run build	// Bundles the app into static files for production.
npm test		// Starts the test runner.

VS Code plugins
--------------
ES7 React/Redux/GraphQL/React-Native snippets
Auto Rename Tag
Bracket Pair Colorizer
JavaScript (ES6) Code snippets
Prettier - Code formatter
    - Editor: Format On Save    -Enable setting
	- Editor: Format On Save Mode - modifications
    - Prettier: Jsx Single Quote
    - Prettier: Semi       - uncheck
    - Prettier: Single Quote
    - Prettier: Tab Width   2

VsCode Explorer fix
"workbench.tree.indent": 12
    
kb shortcuts
rafce - ReactArrowFunctionComponentExport
rcc - React Class Component

https://reactrouter.com/web/api/Link
https://react-bootstrap.github.io/
https://react-bootstrap.github.io/components/
https://fontawesome.com/v5.15/icons?d=gallery&p=2&m=free
https://fonts.google.com/icons
https://getbootstrap.com/docs/4.0/utilities/spacing/#notation
https://getbootstrap.com/docs/5.1/utilities/text/
https://material-ui.com/
https://bootswatch.com/
https://cdnjs.com/libraries/font-awesome
https://github.com/bradtraversy/proshop_mern
https://materializecss.com/grid.html
// npm install react-bootstrap bootstrap
npm install react-bootstrap

- download bootstrap.min.css from bootswatch.com and import in index.js
- from https://cdnjs.com/libraries/font-awesome "Copy Link Tag" for all.min.css and include it in index.html

- Convert commonjs - require() syntax to 
    import style syntax which are ECMAScript modules (available in Nodejs 14.4+) 
    
const express = require('express')      // commonjs modules syntax
import { Express } from 'express'       // ES6 modules (available in Node 14.4+)

module.exports = products       // commonjs export
export default products         // ES6 export

- frontend/package.json 
    "proxy": "http://localhost:5000",

Frontend
=========
npm i react-router-dom react-router-bootstrap
npm i axios
npm i mongoose 
npm i colors 
npm i bcryptjs 
npm i express-async-handler 
npm i redux react-redux redux-thunk redux-devtools-extension 
- "React Dev tools" 
- "Redux Dev tools" chrome extension

Backend
===========
GET     /api/products
POST    /api/products
PUT     /api/products/25
DELETE  /api/products/25

cd reactshop
npm init		// set up a new npm package for backend- package.json
    - entry point: server.js
npm i express
// node backend/server
npm start

Concepts
=========

JSX
-----
- JSX tag syntax is neither a string nor HTML.
	const element = <h1>Hello, world!</h1>;
- JSX is a syntax extension to JavaScript
- JSX produces React “elements”
- Why JSX
	- React embraces the fact that rendering logic is inherently coupled with other UI logic: 
		how events are handled, how the state changes over time, and how the data is prepared for display.
	- Instead of artificially separating technologies by putting markup and logic in separate files, 
		React separates concerns with loosely coupled units called “components” that contain both.

Example:
	const name = 'Rahul Dravid';
	const element = <h1>Hello, {name}</h1>;
	ReactDOM.render(
	  element,
	  document.getElementById('root')
	);

- Specifying Attributes with JSX
	const element = <div tabIndex="0"></div>;		// use quotes to specify string literals as attributes:
	const element = <img src={user.avatarUrl}></img>;	// use curly braces to embed a JavaScript expression in an attribute

- You should either use quotes (for string values) or curly braces (for expressions), but not both in the same attribute.
- Since JSX is closer to JavaScript than to HTML, 
	React DOM uses camelCase property naming convention instead of HTML attribute names.
	For example, class becomes className in JSX, and tabindex becomes tabIndex.
- Specifying Children with JSX
	const element = (
	  <div>
		<h1>Hello!</h1>
		<h2>Good to see you here.</h2>
	  </div>
	);
- JSX Prevents Injection Attacks
	- By default, React DOM escapes any values embedded in JSX before rendering them
	- Everything is converted to a string before being rendered. This helps prevent XSS (cross-site-scripting) attacks.
- JSX Represents Objects
	- Babel compiles JSX down to React.createElement() calls.
	- These two examples are identical:
	const element = (
	  <h1 className="greeting">
		Hello, world!
	  </h1>
	);
	const element = React.createElement(
	  'h1',
	  {className: 'greeting'},
	  'Hello, world!'
	);
	
	- React.createElement() essentially creates an object like this:
	// Note: this structure is simplified
	const element = {
	  type: 'h1',
	  props: {
		className: 'greeting',
		children: 'Hello, world!'
	  }
	};
	- These objects are called “React elements”. 
	- React reads these objects and uses them to construct the DOM and keep it up to date.

Rendering Elements
------------------
- Elements are the smallest building blocks of React apps.
- An element describes what you want to see on the screen:
	const element = <h1>Hello, world</h1>;'
- Unlike browser DOM elements, React elements are plain objects, and are cheap to create. 
- React DOM takes care of updating the DOM to match the React elements.
- <div id="root"></div>
	- “root” DOM node. everything inside it will be managed by React DOM.
	- usually React app have a single root DOM node.
	- If you are integrating React into an existing app, you may have as many isolated root DOM nodes as you like.
- To render a React element into a root DOM node
	const element = <h1>Hello, world</h1>;
	ReactDOM.render(element, document.getElementById('root'));
- Updating the Rendered Element
	- React elements are immutable.
	- Once you create an element, you can’t change its children or attributes.
	- An element is like a single frame in a movie: it represents the UI at a certain point in time.
- React Only Updates What’s Necessary
	- React DOM compares the element and its children to the previous one, 
	and only applies the DOM updates necessary to bring the DOM to the desired state.

Components and Props
--------------------
- Components let you split the UI into independent, reusable pieces
- Conceptually, components are like JavaScript functions. 
- They accept arbitrary inputs (called props) and return React elements describing what should appear on the screen
- Two ways to define component- 1) function component 2) class component
- function component. They are literally JavaScript functions.
	function Welcome(props) {
	  return <h1>Hello, {props.name}</h1>;
	}
- class component. ES6 class
	class Welcome extends React.Component {
	  render() {			// must override render(). Other methods are optional
		return <h1>Hello, {this.props.name}</h1>;
	  }
	}
- elements can also represent user-defined components:
	const element = <Welcome name="Sara" />;
- In this case react passes JSX attributes and children to this component as a single object called “props”
- Summary
	function Welcome(props) {
	  return <h1>Hello, {props.name}</h1>;
	}

	const element = <Welcome name="Sara" />;
	ReactDOM.render(
	  element,
	  document.getElementById('root')
	);

	1. We call ReactDOM.render() with the <Welcome name="Sara" /> element.
	2. React calls the Welcome component with {name: 'Sara'} as the props.
	3. Our Welcome component returns a <h1>Hello, Sara</h1> element as the result.
	4. React DOM efficiently updates the DOM to match <h1>Hello, Sara</h1>.
- NOTE: Always start component names with a capital letter.
	- components starting with lowercase letters are treated as DOM tags
	- e.g. <div /> represents an HTML div tag, but <Welcome /> represents a component
- Composing Components
	- Components can refer to other components in their output
		function Welcome(props) {
		  return <h1>Hello, {props.name}</h1>;
		}

		function App() {
		  return (
			<div>
			  <Welcome name="Sara" />
			  <Welcome name="Cahal" />
			  <Welcome name="Edite" />
			</div>
		  );
		}

		ReactDOM.render(
		  <App />,
		  document.getElementById('root')
		);
- Extracting Components
	function Comment(props) {
	  return (
		<div className="Comment">
		  <div className="UserInfo">
			<img className="Avatar"
			  src={props.author.avatarUrl}
			  alt={props.author.name}
			/>
			<div className="UserInfo-name">
			  {props.author.name}
			</div>
		  </div>
		  <div className="Comment-text">
			{props.text}
		  </div>
		  <div className="Comment-date">
			{formatDate(props.date)}
		  </div>
		</div>
	  );
	}

	- Changed to
	function Avatar(props) {
	  return (
		<img className="Avatar"
		  src={props.user.avatarUrl}
		  alt={props.user.name}
		/>
	  );
	}
	function UserInfo(props) {
	  return (
		<div className="UserInfo">
		  <Avatar user={props.user} />
		  <div className="UserInfo-name">
			{props.user.name}
		  </div>
		</div>
	  );
	}
	function Comment(props) {
	  return (
		<div className="Comment">
		  <UserInfo user={props.author} />
		  <div className="Comment-text">
			{props.text}
		  </div>
		  <div className="Comment-date">
			{formatDate(props.date)}
		  </div>
		</div>
	  );
	}
	const comment = {
	  date: new Date(),
	  text: 'I hope you enjoy learning React!',
	  author: {
		name: 'Hello Kitty',
		avatarUrl: 'https://placekitten.com/g/64/64',
	  },
	};
	ReactDOM.render(
	  <Comment
		date={comment.date}
		text={comment.text}
		author={comment.author}
	  />,
	  document.getElementById('root')
	);

- Props are Read-Only
	- Whether you declare a component as a function or a class, it must never modify its own props
	- Functions that do not attempt to change their inputs are called “pure” functions e.g.
		function sum(a, b) {
		  return a + b;
		}
	- impure function example- it changes its own input
		function withdraw(account, amount) {
		  account.total -= amount;
		}
	- React has a single strict rule: All React components must act like pure functions with respect to their props.
	- State allows React components to change their output over time in response to user actions, network responses, 
	  and anything else, without violating this rule.

State and lifecycle
-------------------
- Adding local state. Using class constructor to define initial state
	  constructor(props) {		// this.props is set up by React itself
		super(props);			// always call the base constructor with props
		this.state = {date: new Date()};	// add something in state
	  }
	  - contructor is called when an instance of a component is being created and inserted into the DOM
- Lifecycle methods	 
	componentDidMount() - runs after the component output has been rendered to the DOM. Called mounting.
	componentWillUnmount() - runs before the component is removed from the DOM. Called unmounting.
- While this.props and this.state are readily available, you can add your own fields like this.timerID
	
- Example
	function FormattedDate(props) {
	  return <h2>It is {props.date.toLocaleTimeString()}.</h2>;
	}
	class Clock extends React.Component {
	  constructor(props) {
		console.log("constructor called")
		super(props);
		this.state = {date: new Date()};
	  }
	  componentDidMount() {			// setup
		this.timerID = setInterval(		// call tick() every second
		  () => this.tick(),
		  1000
		);
	  }
	  componentWillUnmount() {		// tear down
		clearInterval(this.timerID);
	  }
	  tick() {
		this.setState({
		  date: new Date()
		});
	  }
	  render() {
		return (
		  <div>
			<h1>Hello, world!</h1>
			<FormattedDate date={this.state.date} />
		  </div>
		);
	  }
	}
	function App() {
	  return (
		<div>
		  <Clock />		
		</div>
	  );
	}
	ReactDOM.render(<App />, document.getElementById('root'));
	
- Do Not Modify State Directly. 
	- Use setState() to modify state e.g.
		this.state.comment = 'Hello';		// wrong. this will not re-render a component:
		this.setState({comment: 'Hello'});	// correct
- only place where you can assign this.state is the constructor.
- State Updates May Be Asynchronous
	- React may batch multiple setState() calls into a single update for performance.
	- Because this.props and this.state may be updated asynchronously, you should not rely on their values for calculating the next state.
		// Wrong
		this.setState({
		  counter: this.state.counter + this.props.increment,
		});
		// Correct. setState with params
		this.setState((state, props) => ({	  // state: previous state, props: props at the time the update is applied
		  counter: state.counter + props.increment
		}));
- State Updates are Merged
	- When you call setState(), React merges the object you provide into the current state. 
	- state may contain several independent variables e.g. 	
		  constructor(props) {
			super(props);
			this.state = { posts: [], comments: [] };
		  }
	- Then you can update them independently with separate setState() calls:
		  componentDidMount() {
			fetchPosts().then(response => {
			  this.setState({				// update posts
				posts: response.posts
			  });
			});

			fetchComments().then(response => {
			  this.setState({				// update comments
				comments: response.comments
			  });
			});
		  }
	 - merging is shallow, so this.setState({comments}) leaves this.state.posts intact, but completely replaces this.state.comments.
- The Data Flows Down
	- Neither parent nor child components can know if a certain component is stateful or stateless
	- state is local or encapsulated. It is only accessible to component that owns and sets it
	- A component may choose to pass its state down as props to its child components:
			<FormattedDate date={this.state.date} />
	- FormattedDate component would receive the date in its props and wouldn’t know  
	  whether it came from the Clock’s state, from the Clock’s props, or was typed by hand:
			function FormattedDate(props) {
			  return <h2>It is {props.date.toLocaleTimeString()}.</h2>;
			}
	- This is commonly called a “top-down” or “unidirectional” data flow. 
	- Any state is always owned by some specific component, 
	  and any data or UI derived from that state can only affect components “below” them in the tree.
	- To show that all components are truly isolated, we can create an App component that renders three <Clock>s:
		- Each Clock sets up its own timer and updates independently.
			function App() {
			  return (
				<div>
				  <Clock />		// This will call Clock constructor three times 
				  <Clock />
				  <Clock />
				</div>
			  );
			}
			ReactDOM.render(
			  <App />,
			  document.getElementById('root')
			);

Handling Events
---------------
- Event handling is similar to DOM event handling with some differences:
	- React events are named using camelCase, rather than lowercase.
	- With JSX you pass a function as the event handler, rather than a string.
		<button onclick="activateLasers()"/>Submit</button>		// js
		<button onClick={activateLasers}>Submit</button>		// react
	- you cannot return false to prevent default behavior in React. You must call preventDefault explicitly
		<form onsubmit="console.log('You clicked submit.'); return false">		// in js
		  <button type="submit">Submit</button>
		</form>
		function Form() {								// in React
		  function handleSubmit(e) {			// e is a synthetic event
			e.preventDefault();
			console.log('You clicked submit.');
		  }
		  return (
			<form onSubmit={handleSubmit}>
			  <button type="submit">Submit</button>
			</form>
		  );
		}
	- React defines these synthetic events according to the W3C spec
	- React events do not work exactly the same as native events. Check SyntheticEvent reference
	- In js you call addEventListener to add listeners to a DOM element after it is created
		In React you need to provide a listener when the element is initially rendered.
- Event handler methods in React component defined using ES6 Class
1. Using bind
	class Toggle extends React.Component {
	  constructor(props) {
		super(props);
		this.state = {isToggleOn: true};

		// This binding is necessary to make `this` work in the callback
		this.handleClick = this.handleClick.bind(this);
	  }
	  handleClick() {
		this.setState(prevState => ({
		  isToggleOn: !prevState.isToggleOn
		}));
	  }
	  render() {
		return (
		  <button onClick={this.handleClick}>
			{this.state.isToggleOn ? 'ON' : 'OFF'}
		  </button>
		);
	  }
	}
	ReactDOM.render(
	  <Toggle />,
	  document.getElementById('root')
	);

	- In js class methods are not bound by default. 
	- If you don't bind this.handleClick and pass it to onClick, this will be undefined when the function is actually called.
	- Generally, if you refer to a method without () after it, such as onClick={this.handleClick}, you should bind that method.
2. Using public class fields syntax - experimental. recommend
	class LoggingButton extends React.Component {
	  // This syntax ensures `this` is bound within handleClick.
	  // Warning: this is *experimental* syntax.
	  handleClick = () => {
		console.log('this is:', this);
	  }

	  render() {
		return (
		  <button onClick={this.handleClick}>
			Click me
		  </button>
		);
	  }
	}
	- This syntax is enabled by default in Create React App
3. use an arrow function in the callback:
	class LoggingButton extends React.Component {
	  handleClick() {
		console.log('this is:', this);
	  }

	  render() {
		// This syntax ensures `this` is bound within handleClick
		return (
		  <button onClick={() => this.handleClick()}>
			Click me
		  </button>
		);
	  }
	}
	- here problem is - a different callback is created each time the LoggingButton renders
	- In most cases, this is fine. 
	- However, if this callback is passed as a prop to lower components, those components might do an extra re-rendering

- Passing Arguments to Event Handlers
	- E.g. if id is the row ID, to pass an extra parameter to an event handler.
		<button onClick={(e) => this.deleteRow(id, e)}>Delete Row</button>		// use arrow functions 
		<button onClick={this.deleteRow.bind(this, id)}>Delete Row</button>		// use Function.prototype.bind
	- In both cases, the e argument representing the React event will be passed as a second argument after the ID
	- With an arrow function, we have to pass it explicitly, but with bind any further arguments are automatically forwarded.

Conditional Rendering
---------------------
	function UserGreeting(props) {
	  return <h1>Welcome back!</h1>;
	}
	function GuestGreeting(props) {
	  return <h1>Please sign up.</h1>;
	}
	function Greeting(props) {
	  const isLoggedIn = props.isLoggedIn;
	  if (isLoggedIn) {
		return <UserGreeting />;
	  }
	  return <GuestGreeting />;
	}
	ReactDOM.render(
	  // Try changing to isLoggedIn={true}:
	  <Greeting isLoggedIn={false} />,
	  document.getElementById('root')
	);

- Conditional Rendering with stateful component - LoginControl
	class LoginControl extends React.Component {
	  constructor(props) {
		super(props);
		this.handleLoginClick = this.handleLoginClick.bind(this);
		this.handleLogoutClick = this.handleLogoutClick.bind(this);
		this.state = {isLoggedIn: false};
	  }
	  handleLoginClick() {
		this.setState({isLoggedIn: true});
	  }
	  handleLogoutClick() {
		this.setState({isLoggedIn: false});
	  }
	  render() {
		const isLoggedIn = this.state.isLoggedIn;
		let button;
		if (isLoggedIn) {
		  button = <LogoutButton onClick={this.handleLogoutClick} />;
		} else {
		  button = <LoginButton onClick={this.handleLoginClick} />;
		}

		return (
		  <div>
			<Greeting isLoggedIn={isLoggedIn} />
			{button}
		  </div>
		);
	  }
	}
	ReactDOM.render(
	  <LoginControl />,
	  document.getElementById('root')
	);

- Inline If with Logical && Operator
	render() {
	  const count = 0;
	  return (
		<div>
		  { count && <h1>Messages: {count}</h1>}
		</div>
	  );
	}
	- if count=0 o/p:	 <div>0</div>
	- if count=1 o/p:	 <div><h1>Messages: 1</h1></div>
	- In js true && expression always evaluates to expression, 
		false && expression always evaluates to false
- Inline If-Else with Conditional Operator
	render() {
	  const isLoggedIn = this.state.isLoggedIn;
	  return (
		<div>
		  The user is <b>{isLoggedIn ? 'currently' : 'not'}</b> logged in.
		</div>
	  );
	}
	
	  return (
		<div>
		  {isLoggedIn
			? <LogoutButton onClick={this.handleLogoutClick} />
			: <LoginButton onClick={this.handleLoginClick} />
		  }
		</div>
	  );
	  
- Preventing Component from Rendering
	- To prevent a Component from Rendering return null instead of its render output
	function WarningBanner(props) {
	  if (!props.warn) {
		return null;		// prevent Component from Rendering
	  }
	  return (
		<div className="warning">
		  Warning!
		</div>
	  );
	}

	class Page extends React.Component {
	  constructor(props) {
		super(props);
		this.state = {showWarning: true}
		this.handleToggleClick = this.handleToggleClick.bind(this);
	  }
	  handleToggleClick() {
		this.setState(prevState => ({
		  showWarning: !prevState.showWarning
		}));
	  }
	  render() {
		return (
		  <div>
			<WarningBanner warn={this.state.showWarning} />
			<button onClick={this.handleToggleClick}>
			  {this.state.showWarning ? 'Hide' : 'Show'}
			</button>
		  </div>
		);
	  }
	}
	ReactDOM.render(
	  <Page />,
	  document.getElementById('root')
	);

- Returning null from a component’s render method does not affect the firing of the component’s lifecycle methods. 
	For instance componentDidUpdate will still be called.

Lists and Keys
--------------
- js code to take an array of numbers and double their values
	const numbers = [1, 2, 3, 4, 5];
	const doubled = numbers.map((number) => number * 2);
	console.log(doubled);
	- In React, transforming arrays into lists of elements is nearly identical.
- Rendering Multiple Components
	- You can build collections of elements and include them in JSX using curly braces {}.
	const numbers = [1, 2, 3, 4, 5];
	const listItems = numbers.map((numbers) =>
	  <li>{numbers}</li>
	);
	ReactDOM.render(
	  <ul>{listItems}</ul>,
	  document.getElementById('root')
	);

- Basic List Component
	- Usually you would render lists inside a component.
	function NumberList(props) {
	  const numbers = props.numbers;
	  const listItems = numbers.map((number) =>
		<li key={number.toString()}>		// specify key in list
		  {number}
		</li>
	  );
	  return (
		<ul>{listItems}</ul>
	  );
	}
	const numbers = [1, 2, 3, 4, 5];
	ReactDOM.render(
	  <NumberList numbers={numbers} />,
	  document.getElementById('root')
	);
- Keys
	- Keys only make sense in the context of the surrounding array.
	- Keys help React identify which items have changed, are added, or are removed. 
	- Keys should be given to the elements inside the array to give the elements a stable identity:
	- If you don't specify key in list items, you will get warning that a key should be provided for list items
	- Most often you would use IDs from your data as keys
	- When you don’t have stable IDs for rendered items, you may use the item index as a key as a last resort:
		const todoItems = todos.map((todo, index) =>
		  // Only do this if items have no stable IDs
		  <li key={index}>
			{todo.text}
		  </li>
		);
		- index as a key is not recommended if the order of items may change
		- This can negatively impact performance and may cause issues with component state
		- if key is not specified React will default to using indexes as keys.
- Extracting Components with Keys
	- Keys only make sense in the context of the surrounding array
	- A good rule of thumb is that elements inside the map() call need keys.
	- Keys used within arrays should be unique among their siblings. However, they don’t need to be globally unique.
	- Keys serve as a hint to React but they don’t get passed to your components. 
		- If you need the same value in your component, pass it explicitly as a prop with a different name
		- ListItem component below can read props.value, but not props.key
		
	function ListItem(props) {
	  // Correct! There is no need to specify the key here:
	  return <li>{props.value}</li>;
	}
	function NumberList(props) {
	  const numbers = props.numbers;
	  const listItems = numbers.map((number) =>
		// Correct! Key should be specified inside the array.
		<ListItem key={number.toString()} value={number} />
	  );
	  return (
		<ul>
		  {listItems}
		</ul>
	  );
	}
	const numbers = [1, 2, 3, 4, 5];
	ReactDOM.render(
	  <NumberList numbers={numbers} />,
	  document.getElementById('root')
	);

- Embedding map() in JSX
	- JSX allows embedding any expression in curly braces so we could inline the map() result:
	function NumberList(props) {
	  const numbers = props.numbers;
	  return (
		<ul>
		  {numbers.map((number) =>
			<ListItem key={number.toString()}
					  value={number} />
		  )}
		</ul>
	  );
	}
	
Forms
--------



- useState() hook
    - We call it inside a function component to add some local state to it. 
    - React will preserve this state between re-renders. 
    - useState returns a pair: the current state value and a function that lets you update it. 
    - You can call this function from an event handler or somewhere else. 
    - Itâ€™s similar to this.setState in a class, except it doesnâ€™t merge the old and new state together.
    e.g const [products, setProduct] = useState([])
- useEffect() hook
    - By using this Hook, you tell React that your component needs to do something after render. 
    - React will remember the function you passed (weâ€™ll refer to it as our â€œeffectâ€�), and call it later 
    after performing the DOM updates.
    - Data fetching, setting up a subscription, and manually changing the DOM in React components are all 
    examples of side effects or just effects

// reactshop/package.json
npm i -D nodemon concurrently       // dev dependencies (only needed for development)
nodemon - automatically restars the node application when file changes in the directory are detected
    - nodemon is a replacement wrapper for node

  "scripts": {
    "start": "node backend/server",
    "server": "nodemon backend/server",
    "client": "npm start --prefix frontend",
    "dev": "concurrently \"npm run server\" \"npm run client\""
  }
  
npm i dotenv        // lets you access properties using e.g. process.env.PORT
cat .env            // add .env in .gitignore
NODE_ENV = development
PORT = 5000

- To use ES modules
    in package.json add following
    "type": "module",
    
MongoDB Compass - GUI and Query tool for MongoDB
Add My Own Data
    DB: reactshop
    Collection: products
// .env     - add following    
MONGO_URI = mongodb+srv://<dbusername>:<password>@<cluster-name>/<database>?retryWrites=true&w=majority
npm i mongoose
npm i bcryptjs

npm run data:import     // import prod data into mongodb

npm i express-async-handler
- Simple middleware for handling exceptions inside of async express routes and passing them to your express error handlers.

- What does asyncHandler do ?
    - Saves you writing your own try/catch for async/await and passes error on to next. e.g.
    
    import asyncHandler from 'express-async-handler'
    express.get('/', asyncHandler(async (req, res, next) => {
        const bar = await foo.findAll();
        res.send(bar)
    }))
    
    - Without asyncHandler you'd need:
    express.get('/',(req, res, next) => {
        foo.findAll()
        .then ( bar => {
           res.send(bar)
         } )
        .catch(next); // error passed on to the error handling route
    })

Redux
------
- https://redux.js.org/tutorials/essentials/part-1-overview-concepts
- Redux is a pattern and library for managing and updating application state, using events called "actions". I
- Redux helps you manage "global" state - state that is needed across many parts of your application.
- The patterns and tools provided by Redux make it easier to understand when, where, why, and how the state in your 
    application is being updated, and how your application logic will behave when those changes occur.
- Redux helps you deal with shared state management,
- Redux is more useful when:
    You have large amounts of application state that are needed in many places in the app
    The app state is updated frequently over time
    The logic to update that state may be complex
    The app has a medium or large-sized codebase, and might be worked on by many people
- application parts
    - state - data in current state that drives our app
    - view -  UI based on the current state
    - actions - events that occur in the app based on user input, and trigger updates in the state
- Challenge?
    - multiple components that need to share and use the same state, especially if those components are located in
     different parts of the application
- Sol
    - extract the shared state from the components, and put it into a centralized location outside the component tree. 
     With this, any component can access the state or trigger actions, no matter where they are in the tree!
- basic idea behind Redux: a single centralized place to contain the global state in your application, 
    and specific patterns to follow when updating that state to make the code predictable.

Actions:
- An action is a plain JavaScript object that has a type field and payload.
- You can think of an action as an event that describes something that happened in the application.

Reducers:
- A reducer is a function that receives the current state and an action object, decides how to update the 
state if necessary, and returns the new state: (state, action) => newState. 
- You can think of a reducer as an event listener which handles events based on the received action (event) type.

- Reducers must always follow some specific rules:
    - They should only calculate the new state value based on the state and action arguments
    - They are not allowed to modify the existing state. Instead, they must make immutable updates, by copying 
    the existing state and making changes to the copied values.
    - They must not do any asynchronous logic, calculate random values, or cause other "side effects"
- logic inside reducer functions typically follows the same series of steps:
    - Check to see if the reducer cares about this action
        - If so, make a copy of the state, update the copy with new values, and return it
    - Otherwise, return the existing state unchanged

Store:
- The current Redux application state lives in an object called the store
- store is created by passing in a reducer, and has a method called getState that returns the current state value

Dispatch:
- The Redux store has a method called dispatch. 
- The only way to update the state is to call store.dispatch() and pass in an action object. 
- The store will run its reducer function and save the new state value inside, and we can call getState() to 
 retrieve the updated value:
- You can think of dispatching actions as "triggering an event" in the application. Something happened, and we want
 the store to know about it. Reducers act like event listeners, and when they hear an action they are interested 
 in, they update the state in response.

Selectors:
- Selectors are functions that know how to extract specific pieces of information from a store state value.

Steps
------
Initial setup:
    - A Redux store is created using a root reducer function
    - The store calls the root reducer once, and saves the return value as its initial state
    - When the UI is first rendered, UI components access the current state of the Redux store, and use that data to 
    decide what to render. They also subscribe to any future store updates so they can know if the state has changed.
Updates:
    - Something happens in the app, such as a user clicking a button
    - The app code dispatches an action to the Redux store, like dispatch({type: 'counter/increment'})
    - The store runs the reducer function again with the previous state and the current action, and saves the return 
    value as the new state
    - The store notifies all parts of the UI that are subscribed that the store has been updated
    - Each UI component that needs data from the store checks to see if the parts of the state they need have changed.
    - Each component that sees its data has changed forces a re-render with the new data, so it can update what's 
    shown on the screen
        

1. create constants
2. create reducer
3. add reducer to store.js
4. create action
5. update Screen e.g. HomeScreen

store.js
    const reducer = combineReducers({
        cart: cartReducer, })
    const store = createStore(
      reducer,
      initialState,
      composeWithDevTools(applyMiddleware(...middleware))
    )

CartScreen.js      -->      cartActions.js      -->       cartReducer.js
removeFromCartHandler():    removeFromCart(id):             cartReducer():
  dispatch(                   dispatch({                      case CART_REMOVE_ITEM:
   removeFromCart(id))          type: CART_REMOVE_ITEM,       return {
                                payload: id })                  ...state,
                              localStorage.setItem()            cartItems: state.cartItems.filter() }
                                               
- npm i jsonwebtoken      

https://skryvets.com/blog/2018/09/20/an-elegant-solution-of-deploying-react-app-into-a-subdirectory/

- react resting https://docs.cypress.io/examples/examples/tutorials#Best-Practices
- invisionapp.com
- sketch
- https://www.velotio.com/engineering-blog/how-to-implement-server-sent-events-using-python-flask-and-react

npm error
==========
- npm ERR! [FAILED] Error: unable to get local issuer certificate
- Reason: may occur because of corporate proxy or zscaler
- Fix:
	npm -g config set strict-ssl false
	export NODE_TLS_REJECT_UNAUTHORIZED=0
		set NODE_TLS_REJECT_UNAUTHORIZED=0		// for Win
	npm i -g abc-package@1.0 --unsafe-perm true
- In Dockerfile
RUN npm -g config set strict-ssl false
ENV NODE_TLS_REJECT_UNAUTHORIZED=0
RUN npm install --unsafe-perm true

https://code.visualstudio.com/docs/nodejs/reactjs-tutorial
npx create-react-app my-app --template typescript		// create a TypeScript version of the create-react-app

