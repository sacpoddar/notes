microk8s notes
==============

microk8s start/stop/status
microk8s enable/disable <addon>
microk8s inspect

https://kubernetes.github.io/ingress-nginx/troubleshooting/
https://rancher.com/learning-paths/how-to-manage-kubernetes-with-kubectl/
https://github.com/ubuntu/microk8s/issues/382
https://kubernetes.io/docs/reference/command-line-tools-reference/kubelet/
https://kubernetes.io/docs/setup/production-environment/container-runtimes/
https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/kubelet-integration/


Manage Docker as a non-root user
------------
sudo groupadd docker            // Create the docker group
sudo usermod -aG docker $USER   // Add your user to the docker group
- Log out and log back in so that your group membership is re-evaluated.

Installation
------------
sudo snap install microk8s --classic --channel=1.21
sudo usermod -a -G microk8s $USER           // Join the group. Manage kubectl as not-root user
sudo chown -f -R $USER ~/.kube
microk8s enable metrics-server dns ingress dashboard       // enable addons
sudo apt-get install iptables-persistent
sudo iptables -S                            // list rules
sudo iptables -P FORWARD ACCEPT             // allow internet access from container
sudo iptables-save
sudo ufw default allow routed               // only if using ufw:

kubectl get all --all-namespaces
kubectl get ns                              // get all namespace
kubectl get pods -n ingress                 // get pods (nginx-ingress-microk8s-controller) for namespace ingress
kubectl logs -f <pod-name> -n ingress       // stream logs for pod for given namespace
kubectl describe pod <pod-name>
kubectl get nodes -o wide                   // To view container runtime

kubectl get svc -n ingress
kubectl get -A ValidatingWebhookConfiguration
kubectl delete -A ValidatingWebhookConfiguration ingress-nginx-admission

/var/run/docker.sock
/etc/docker/daemon.json
/var/snap/microk8s/current/args/dockerd
/var/snap/microk8s/current/args/containerd-template.toml
/var/snap/microk8s/current/args/kubelet

dpkg -l         // list installed packages
snap list




Generate dashboard Token
-----------------------
token=$(kubectl -n kube-system get secret | grep default-token | cut -d " " -f1)
kubectl -n kube-system describe secret $token

Push images to microk8s registry
-----------------------
multipass list
multipass exec microk8s-vm -- /snap/bin/microk8s.kubectl get all -n container-registry
- trust registry
echo "{
  \"insecure-registries\" : [\"10.141.241.134:32000\"]
}" | sudo tee /etc/docker/daemon.json
systemctl restart docker
- push image
docker pull busybox
docker tag busybox 10.141.241.134:32000/my-busybox
docker push 10.141.241.134:32000/my-busybox


$ sudo iptables -S
# Warning: iptables-legacy tables present, use iptables-legacy to see them
-P INPUT ACCEPT
-P FORWARD DROP
-P OUTPUT ACCEPT
-N DOCKER
-N DOCKER-ISOLATION-STAGE-1
-N DOCKER-ISOLATION-STAGE-2
-N DOCKER-USER
-A FORWARD -j DOCKER-USER
-A FORWARD -j DOCKER-ISOLATION-STAGE-1
-A FORWARD -o docker0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
-A FORWARD -o docker0 -j DOCKER
-A FORWARD -i docker0 ! -o docker0 -j ACCEPT
-A FORWARD -i docker0 -o docker0 -j ACCEPT
-A DOCKER-ISOLATION-STAGE-1 -i docker0 ! -o docker0 -j DOCKER-ISOLATION-STAGE-2
-A DOCKER-ISOLATION-STAGE-1 -j RETURN
-A DOCKER-ISOLATION-STAGE-2 -o docker0 -j DROP
-A DOCKER-ISOLATION-STAGE-2 -j RETURN
-A DOCKER-USER -j RETURN

SNAP_DATA   /var/snap/microk8s/current
SNAP_COMMON /var/snap/microk8s/common/

--kubeconfig=${SNAP_DATA}/credentials/kubelet.config
--cert-dir=${SNAP_DATA}/certs
--client-ca-file=${SNAP_DATA}/certs/ca.crt
--anonymous-auth=false
--network-plugin=cni
--root-dir=${SNAP_COMMON}/var/lib/kubelet
--fail-swap-on=false
--cni-conf-dir=${SNAP_DATA}/args/cni-network/
--cni-bin-dir=${SNAP_DATA}/opt/cni/bin/
--feature-gates=DevicePlugins=true
--eviction-hard="memory.available<100Mi,nodefs.available<1Gi,imagefs.available<1Gi"
--container-runtime=remote
--container-runtime-endpoint=${SNAP_COMMON}/run/containerd.sock
--containerd=${SNAP_COMMON}/run/containerd.sock
--node-labels="microk8s.io/cluster=true"
--authentication-token-webhook=true
--cluster-domain=cluster.local
--cluster-dns=10.152.183.10

--docker-root=${SNAP_COMMON}/var/lib/docker
--docker unix://${SNAP_DATA}/docker.sock
--docker-endpoint unix://${SNAP_DATA}/docker.sock


