Python notes
============

miniconda
=========
https://docs.conda.io/en/latest/miniconda.html
Open Anaconda Prompt
	conda update conda
- Creating a new env from scratch
	conda create -n testenv python=3.7
	conda activate testenv						// switch to env
	conda config --add channels conda-forge		// channel for installing Python libraries
- Creating a new env from existing env.yml file
	conda env create -f env.yml
	conda activate testenv
- Install required packages
	conda install numpy			// or
	conda install --channel "conda-forge" numpy
	pip list					// list installed packages
- Generate/update env.yml file
	conda env export --no-build -f env.yml
- Exit env
	conda deactivate
- Remove env
	conda remove -n testenv --all

python -V		// version
pip list		// list installed packages


- Python uses indentation to indicate a block of code.
- Python will give you an error if you skip the indentation:
	if 5 > 2:
	print("Five is greater than two!")		// ERROR
- number of spaces is up to you as a programmer, but it has to be at least one.
- You have to use the same number of spaces in the same block of code, otherwise Python will give you an error
- Comments
	# comment1
- Python has no command for declaring a variable.
	A variable is created the moment you first assign a value to it.
- Variables do not need to be declared with any particular type, and can even change type after they have been set.
	x = 4       # x is of type int
	x = "Sally" # x is now of type str
	print(x)
- Casting
	x = str(3)    # x will be '3'
	y = int(3)    # y will be 3
	z = float(3)  # z will be 3.0
- Get the Type
	You can get the data type of a variable with the type() function.
	x = 5
	print(type(x))		// <class 'int'>
- String variables can be declared either by using single or double quotes
- Variable names are case-sensitive.
- allows you to assign values to multiple variables in one line:
	x, y, z = "Orange", "Banana", "Cherry"
- you can assign the same value to multiple variables in one line:
	x = y = z = "Orange"
- Unpack a Collection
	If you have a collection of values in a list, tuple etc.
	fruits = ["apple", "banana", "cherry"]
	x, y, z = fruits
	print(x)
	print(y)
	print(z)
- Global Variables
	- Variables that are created outside of a function are known as global variables.
	- Creating a variable inside a function, with the same name as the global variable will hide the global variable
		x = "one"
		
		def myfunc():
		  x = "two"
		  print("local x = " + x)
		
		myfunc()					# print local x = two
		print("global x " + x)		# print global x = one
	- To create/refer a global variable inside a function, you can use the global keyword.
		x = "one"
		
		def myfunc():
		  global x      # x refers to global x
		  global y      # create global var
		  y = "two"
		  print("local x = " + x)
		
		myfunc()                    # local x = one
		print("global x = " + x)    # global x = one
		print("global y = " + y)    # global y = two
- Built-in Data Types
	Text Type:		str
	Numeric Types:	int, float, complex
	Sequence Types:	list, tuple, range
	Mapping Type:	dict
	Set Types:		set, frozenset
	Boolean Type:	bool
	Binary Types:	bytes, bytearray, memoryview

	x = "Hello World"					str	
	x = 20								int	
	x = 20.5							float	
	x = 1j								complex	
	x = ["apple", "banana", "cherry"]	list	
	x = ("apple", "banana", "cherry")	tuple	
	x = range(6)						range	
	x = {"name" : "John", "age" : 36}	dict	
	x = {"apple", "banana", "cherry"}	set	
	x = frozenset({"apple", "banana", "cherry"})	frozenset	
	x = True							bool	
	x = b"Hello"						bytes	
	x = bytearray(5)					bytearray	
	x = memoryview(bytes(5))			memoryview

Strings
-------
x = "str"
y = 'str'
z = """Multi line 			# you can also use '''
String"""
- strings are arrays of bytes representing unicode characters
- Python does not have a character data type, a single character is simply a string with a length of 1
- index can be used to access elements of the string
	a = "Hello, World!"
	print(a[0])    		# print H
- looping through a string
	for x in "banana":
	  print(x)
- len() function returns the length of a string
	len(x)
- contains string
	txt = "The best things in life are free!"
	if "free" in txt:
	  print("Yes, 'free' is present.")
- not contains string
	if "free" not in txt:
- Slicing
  Get the characters from position 2 to position 5 (not included):
	b = "Hello, World!"
	print(b[2:5])			# llo
  	print(b[:5])			# Hello			Slice From the Start
 	print(b[2:])			# llo, World!	Slice To the End
 	print(b[-5:-2])			# orl			negative indexes to start the slice from the end of the string
- Strings methods. Does not modify actual string. Returns a copy
	b.upper()		# HELLO, WORLD!
	b.lower()		# hello, world!
	b.strip()		# remove leading and trailing whitespace
	b.replace("o", "u")		# replace all occurrence
	b.replace("o", "u", 1)	# replace first occurrence only
	b.split(",")	# ['Hello', ' World!']
- String concatenation
	z = x + y
	z = x + " " +  y	# add a space in between
- Format string
	x = "my name is {} I am {} years old"
	print( x.format("sac", 31))		# my name is sac I am 31 years old

	x = "my name is {1} I am {0} years old"
	print( x.format(31, "sac"))		# my name is sac I am 31 years old
	
Boolean
--------
- a boolean can have value True or False
	x = True
- bool() function allows you to evaluate any value, and give you True or False in return
	x = "Hello"
	y = 15
	print(bool(x))			# True
	print(bool(y))			# True
- False, None, Empty string, 0, and empty list, tuple, set, and dictionary evaluates to False
- isinstance() function, can be used to determine if an object is of a certain data type:
	x = 200
	print(isinstance(x, int))	# True
	
List
------
- List is a collection which is ordered and changeable. Allows duplicate members.
- Tuple is a collection which is ordered and unchangeable. Allows duplicate members.
- Set is a collection which is unordered and unindexed. No duplicate members.
- Dictionary is a collection which is ordered* and changeable. No duplicate members.

	list1 = ["apple", "banana", "cherry", "orange"]
	list2 = [1, 5, 7, 9, 3]
	print( len(list1) )								# 4  - Get list length using len() function
	list4 = list(("apple", "banana", "cherry"))		# Using the list() constructor to make a List
	
	print( list1[0] )	# apple
	print( list1[-1] )	# orange. Negative indexing. -1 refers to the last item, -2 refers to the second last item etc.
	print( list1[1:3] ) # ['banana', 'cherry'] 	- Range of Indexes. 
						# Return value will be a new list with the specified items. 
                        # start-index (included) and end-index (excluded).
	print( list1[1:] ) 	# ['banana', 'cherry', 'orange']		start-index till end
	print( list1[:3] )	# ['apple', 'banana', 'cherry']			till end-index
	if "apple" in list1:			# Check if a item exists
		print("apple exist")
