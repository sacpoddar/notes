Docker notes
============

https://training.play-with-docker.com/
https://hub.docker.com/

- Docker is a self-sufficient runtime for containers
- Docker is a platform to develop, deploy, and run applications with containers
- Containerization - Use of Linux containers to deploy applications.
- Containerization is increasingly popular because containers are:
	Flexible: Even the most complex applications can be containerized.
	Lightweight: Containers leverage and share the host kernel.
	Interchangeable: You can deploy updates and upgrades on-the-fly.
	Portable: You can build locally, deploy to the cloud, and run anywhere.
	Scalable: You can increase and automatically distribute container replicas.
	Stackable: You can stack services vertically and on-the-fly.
- An image is an executable package that includes everything needed to run an application--the code, 
	a runtime, libraries, environment variables, and configuration files.
- A container is a runtime instance of an image--what the image becomes in memory when executed 
	(that is, an image with state, or a user process). 

Containers vs VM
----------------
- A container runs natively on Linux and shares the kernel of the host machine with other containers. 
	It runs a discrete process, taking no more memory than any other executable, making it lightweight.
- A virtual machine (VM) runs a full-blown "guest" operating system with virtual access to host resources
	through a hypervisor. In general, VMs provide an environment with more resources than most applications need.

----------------------------------      ----------------------------------
Container | Container  | Container        VM      |   VM       |  VM
----------------------------------      ----------------------------------
App A     | App B      | App C          App A     | App B      | App C    
----------------------------------      ----------------------------------
bins/libs | bins/libs  | bins/libs      bins/libs | bins/libs  | bins/libs
----------------------------------      ----------------------------------
            Docker                      Guest OS  | Guest OS   | Guest OS
----------------------------------      ----------------------------------
            Host OS                                 Hypervisor
----------------------------------      ----------------------------------
            Infrastructure                          Infrastructure
----------------------------------      ----------------------------------

Docker Engine
-------------
Docker Engine is a client-server application with these major components:
 - A command line interface (CLI) client (the docker command).
 - A REST API which specifies interfaces that programs can use to talk to server and instruct it what to do.
 - A server which is a type of long-running program called a daemon process (the dockerd command).   
	client (docker) --> REST API --> server (dockerd)
 - server creates and manages Docker objects, such as images, containers, networks, and volumes.
	
Docker architecture
-------------------
CLIENT	---------------->	DOCKER HOST		--------->	REGISTRY
docker build				Docker daemon				ubuntu image
docker pull					------------				centos image
docker run				Containers		Images			nginx image (based on debian)
						----------		-------			python image
						container1		image1
						container2		image2

Docker uses a client-server architecture. 
The Docker client talks to the Docker daemon, which does the heavy lifting of building, running, and distributing your Docker containers. 
The Docker client and daemon can run on the same system, or you can connect a Docker client to a remote Docker daemon. 
The Docker client and daemon communicate using a REST API, over UNIX sockets or a network interface.

docker command options 
======================
docker						// print usage
docker [OPTIONS] COMMAND	// syntax
docker COMMAND --help		// for more information on a command.

OPTIONS
      --config string      Location of client config files (default "C:\\Users\\<UserName>\\.docker") 
                           // Contains config.json  daemon.json
  -c, --context string     Name of the context to use to connect to the daemon
                           (overrides DOCKER_HOST env var and default context set with "docker context use")
  -D, --debug              Enable debug mode
  -H, --host list          Daemon socket(s) to connect to
  -l, --log-level string   Set the logging level  ("debug"|"info"|"warn"|"error"|"fatal")  (default "info")
      --tls                Use TLS; implied by --tlsverify
      --tlscacert string   Trust certs signed only by this CA (default "C:\\Users\\<UserName>\\.docker\\ca.pem")
      --tlscert string     Path to TLS certificate file (default "C:\\Users\\<UserName>\\.docker\\cert.pem")
      --tlskey string      Path to TLS key file (default "C:\\Users\\<UserName>\\.docker\\key.pem")
      --tlsverify          Use TLS and verify the remote
  -v, --version            Print version information and quit

COMMAND
-- Management Commands:
  image       Manage images
  container   Manage containers
  builder     Manage builds
  config      Manage Docker configs
  context     Manage contexts
  network     Manage networks
  node        Manage Swarm nodes
  plugin      Manage plugins
  secret      Manage Docker secrets
  service     Manage services
  stack       Manage Docker stacks
  swarm       Manage Swarm
  system      Manage Docker
  trust       Manage trust on Docker images
  volume      Manage volumes
-- Other commands
  attach      Attach local standard input, output, and error streams to a running container
  build       Build an image from a Dockerfile
  commit      Create a new image from a container's changes
  cp          Copy files/folders between a container and the local filesystem
  create      Create a new container
  diff        Inspect changes to files or directories on a container's filesystem
  events      Get real time events from the server
  exec        Run a command in a running container
  export      Export a container's filesystem as a tar archive
  history     Show the history of an image
  images      List images
  import      Import the contents from a tarball to create a filesystem image
  info        Display system-wide information
  inspect     Return low-level information on Docker objects
  kill        Kill one or more running containers
  load        Load an image from a tar archive or STDIN
  login       Log in to a Docker registry
  logout      Log out from a Docker registry
  logs        Fetch the logs of a container
  pause       Pause all processes within one or more containers
  port        List port mappings or a specific mapping for the container
  ps          List containers
  pull        Pull an image or a repository from a registry
  push        Push an image or a repository to a registry
  rename      Rename a container
  restart     Restart one or more containers
  rm          Remove one or more containers
  rmi         Remove one or more images
  run         Run a command in a new container
  save        Save one or more images to a tar archive (streamed to STDOUT by default)
  search      Search the Docker Hub for images
  start       Start one or more stopped containers
  stats       Display a live stream of container(s) resource usage statistics
  stop        Stop one or more running containers
  tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE
  top         Display the running processes of a container
  unpause     Unpause all processes within one or more containers
  update      Update configuration of one or more containers
  version     Show the Docker version information
  wait        Block until one or more containers stop, then print their exit codes

## Display Docker version and info
docker --version	// get version
docker version		// get version for all components i.e. version for client, server, containerd, runc, docker-init
docker info			// get info like client debug mode, server debug mode, available CPUs, memory, Kernel Version etc

## Execute Docker image. Test Docker installation
docker run hello-world			// docker run = docker create + docker start
docker create hello-world		// create container
docker start -a <container-id>	// run container

## List Docker images
docker image ls

## List Docker containers (running, all, all in quiet mode)
docker container --help
docker container ls
docker container ls --all
docker container ls -aq

docker image COMMAND			# Manage images
docker container COMMAND		# Manage containers
docker container run [OPTIONS] IMAGE [COMMAND] [ARG...]		# Run a command in a new container
docker container exec [OPTIONS] CONTAINER COMMAND [ARG...]	# Run a command in a running container

Image mgmt commands
=================
docker image build .								# build image using current directory's Dockerfile
docker image build -t friendlyhello .  				# build image named "friendlyhello" using this directory's Dockerfile
docker image build -t spoddar0/redis:latest	.		# -t --tag-list   Name and optionally a tag in the 'name:tag' forma
docker image ls -a                             		# List all images on this machine
docker image rm <image_name|image_id>           	# Remove specified image from this machine
docker image rm $(docker image ls -a -q)   			# Remove all images from this machine
docker save alpine:latest -o alpine-latest.tar		// save alpine image as tar file
docker load -i alpine-latest.tar					// load image

Container mgmt commands
=================
docker container run -p 4000:80 friendlyhello  		# create container from image "friendlyhello" mapping host_port:container_port
docker container run -d -p 4000:80 --name friendlyapp friendlyhello		# Same thing, but in detached mode and with container name
docker container ls                                	# List all running containers
docker ps											// same as ls
docker container ls -a             					# List all containers, even those not running
docker ps -a										// same as ls -a
docker create 
docker container start <container_id|names>		 	# start the specified container
docker container stop <container_id|names>          # Gracefully stop the specified container. Sends SIGTERM message to container
docker container kill <container_id|names>         	# Force shutdown of the specified container. Sends SIGKILL message to container
docker container exec -it <container_id> bash		# connect to bash inside an already-running container
docker container rm <container_id|names>        	# Remove specified container from this machine
docker logs <container_id|names> 					# view logs, STDOUT

docker container rm $(docker container ls -a -q)    # Remove all containers
docker login             							# Log in this CLI session using your Docker credentials
docker tag <image> username/repository:tag  		# Tag <image> for upload to registry
docker push username/repository:tag            		# Upload tagged image to registry
docker run username/repository:tag                  # Run image from a registry

docker container prune								# Remove all stopped containers
docker system prune						// Remove unused data i.e. stopped containers, dangling images, build cache, unused n/w


Connecting to container bash using Gitbash
-----------------------------------
docker build -t crawler-test .						# build image
winpty docker container run --interactive --tty --rm crawler-test bash
winpty docker container run --interactive --tty --rm --publish 8080:8080 crawler-test2 bash
docker container run --detach --publish 8080:8080 crawler-test2
winpty docker exec -it <container_id> bash			# connect to bash inside an already-running container

docker run redis									// start redis server
docker exec -it <container_id> redis-cli 			// start redis client.
										// -i --interactive Keep STDIN open. -t --tty Allocate a pseudo-TTY
										// in short -it makes available STDIN, STDOUT, STDERR for command
docker run -it busybox sh				// run shell inside container instead of default command

Redis dockerfile example
--------------------
cd redis-image
cat Dockerfile
FROM alpine			# use existing docker image as base
RUN apk add --update redis		# download and install dependency
CMD ["redis-server"]		# what to do when container starts	

docker build . 			// to build the image
docker run <image_id> 

Manual image generation with docker commit
-------------------
docker run -it alpine sh
# apk add --update redis		// install redis

- on another console
docker ps 		// get container id
docker commit -c 'CMD ["redis-server"]' <container-id>


Building first app
===================

mkdir friendlyhello
cd friendlyhello
- create Dockerfile, requirements.txt and app.py

Dockerfile
----------
# Use an official Python runtime as a parent image
FROM python:2.7-slim

# Set the working directory to /app
WORKDIR /app

# Copy the current directory contents into the container at /app
COPY . /app

# Install any needed packages specified in requirements.txt
RUN pip install --trusted-host pypi.python.org -r requirements.txt

# Make port 80 available to the world outside this container
EXPOSE 80

# Define environment variable
ENV NAME World

# Run app.py when the container launches
CMD ["python", "app.py"]

requirements.txt
----------------
Flask
Redis

app.py
------
from flask import Flask
from redis import Redis, RedisError
import os
import socket

# Connect to Redis
redis = Redis(host="redis", db=0, socket_connect_timeout=2, socket_timeout=2)

app = Flask(__name__)

@app.route("/")
def hello():
    try:
        visits = redis.incr("counter")
    except RedisError:
        visits = "<i>cannot connect to Redis, counter disabled</i>"

    html = "<h3>Hello {name}!</h3>" \
           "<b>Hostname:</b> {hostname}<br/>" \
           "<b>Visits:</b> {visits}"
    return html.format(name=os.getenv("NAME", "world"), hostname=socket.gethostname(), visits=visits)

if __name__ == "__main__":
    app.run(host='0.0.0.0', port=80)
-----------------

docker build --tag=friendlyhello .			// build the app/image in local Docker image registry:
docker image ls								// Note: tag defaulted to latest
	REPOSITORY            TAG                 IMAGE ID
	friendlyhello         latest              326387cea398
docker run -p 4000:80 friendlyhello			// run the app
docker container ls							// list container
docker container stop <container_id>


Docker RUN vs CMD vs ENTRYPOINT
===============================
- RUN executes command(s) in a new layer and creates a new image. E.g., it is often used for installing software packages.
- CMD sets default command and/or parameters, which can be overwritten from command line when docker container runs.
- ENTRYPOINT configures a container that will run as an executable.

- All three instructions (RUN, CMD and ENTRYPOINT) can be specified in shell form or exec form.
- shell form
	<instruction> <command>
	RUN apt-get install python3
	CMD echo "Hello world"
	ENTRYPOINT echo "Hello world"
- in shell form it calls /bin/sh -c <command> under the hood and normal shell processing happens
	ENV name John Dow
	ENTRYPOINT echo "Hello, $name"		// Hello, John Dow
- exec form
	<instruction> ["executable", "param1", "param2", ...]
	RUN ["apt-get", "install", "python3"]
	CMD ["/bin/echo", "Hello world"]
	ENTRYPOINT ["/bin/echo", "Hello world"]	
- in exec form it calls executable directly, and shell processing does not happen.
	ENV name John Dow
	ENTRYPOINT ["/bin/echo", "Hello, $name"]		// Hello, $name
- run bash in exec form
	ENV name John Dow
	ENTRYPOINT ["/bin/bash", "-c", "echo Hello, $name"]		// Hello, John Dow
	
- RUN
    RUN <command> 								// shell form
    RUN ["executable", "param1", "param2"] 		// exec form
	- it is often used for installing software packages
	- It executes any commands on top of the current image and creates a new layer by committing the results
- CMD
    CMD ["executable","param1","param2"] 		// exec form, preferred
    CMD ["param1","param2"] 					// sets additional default parameters for ENTRYPOINT in exec form
    CMD command param1 param2 					// shell form
	- to set a default command, which will be executed only when you run container without specifying a command. 
	- If Docker container runs with a command, the default command will be ignored. 
	- If Dockerfile has more than one CMD instruction, all but last CMD instructions are ignored.
- ENTRYPOINT
    ENTRYPOINT ["executable", "param1", "param2"] 	// exec form, preferred
    ENTRYPOINT command param1 param2 				// shell form
	- to specify a command with parameters
	- its command and parameters are not ignored when Docker container runs with command line parameters
	
	- Shell form of ENTRYPOINT ignores any CMD or docker run command line arguments.
	- Exec form of ENTRYPOINT allows you to set commands and parameters and then use either form of CMD to set 
		additional parameters that are more likely to be changed. 
		ENTRYPOINT arguments are always used, while CMD ones can be overwritten by command line arguments provided when Docker container runs.
	e.g.1 	
		ENTRYPOINT ["/bin/echo", "Hello"]
		CMD ["world"]
		docker run -it <image>			// Hello world
		docker run -it <image> John		// Hello John
	e.g.2
		FROM busybox:latest
		CMD ["/bin/echo","param2"]
		ENTRYPOINT ["/bin/echo", "Hello param1"]
		docker container run --rm <image>			// Hello param1 /bin/echo param2
		docker container run --rm <image> param3	// Hello param1 param3
		
---------------------------
docker-machine ls		// list all docker host
dcoker-machine inspect <host_name>		// get description about docker host
docker-machine ip <host_name>			// ip of docker host
docker-machine create --driver virtualbox <host_name>	// create docker host
dcoker-machine env <host_name>		// env variable for host

- create Dockerfile in root dir of your project
Dockerfile
FROM tomcat:latest			// Use DockerHub://tomcat:latest as the base image
ADD ./tomcat-users.xml /usr/local/tomcat/conf/tomcat-users.xml		// add tomcat-users.xml to image
ADD ./target/test.war 	/usr/lcal/tomcat/webapps/test.war			// add app war file to image

docker build -t <image-name> .		// create image
docker images
docker run -t --rm -p 8888:8080 <image-name>
----------------------------




